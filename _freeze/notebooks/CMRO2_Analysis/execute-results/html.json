{
  "hash": "0a558655a1be763f387207f92f7bca0e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"NatalieCNN\"\nauthor: \"Anna Zhu\"\ndate: \"10/04/2024\"\noutput: html_document\n---\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(drc)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: MASS\n\nAttaching package: 'MASS'\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\n'drc' has been loaded.\n\nPlease cite R and 'drc' if used for a publication,\nfor references type 'citation()' and 'citation('drc')'.\n\n\nAttaching package: 'drc'\n\nThe following objects are masked from 'package:stats':\n\n    gaussian, getInitial\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(lubridate)\nlibrary(corrplot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\ncorrplot 0.92 loaded\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(ggpubr)\nlibrary(ggplot2)\nlibrary(ggeffects)\nlibrary(dplyr)\nlibrary(plyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n------------------------------------------------------------------------------\nYou have loaded plyr after dplyr - this is likely to cause problems.\nIf you need functions from both plyr and dplyr, please load plyr first, then dplyr:\nlibrary(plyr); library(dplyr)\n------------------------------------------------------------------------------\n\nAttaching package: 'plyr'\n\nThe following object is masked from 'package:ggpubr':\n\n    mutate\n\nThe following objects are masked from 'package:dplyr':\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise,\n    summarize\n\nThe following object is masked from 'package:purrr':\n\n    compact\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(robustbase)\nlibrary(patchwork)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'patchwork'\n\nThe following object is masked from 'package:MASS':\n\n    area\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(psych)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'psych'\n\nThe following object is masked from 'package:drc':\n\n    logistic\n\nThe following objects are masked from 'package:ggplot2':\n\n    %+%, alpha\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(ggtext)\nlibrary(boot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'boot'\n\nThe following object is masked from 'package:psych':\n\n    logit\n\nThe following object is masked from 'package:robustbase':\n\n    salinity\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(broom)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntheme_minimalism <- function(){\n\ntheme_minimal() + # ggplot′s minimal theme hides many unnecessary features of plot\ntheme( # make modifications to the theme\npanel.grid.major.y=element_blank(), # hide major grid for y axis\npanel.grid.minor.y=element_blank(), # hide minor grid for y axis\npanel.grid.major.x=element_blank(), # hide major grid for x axis\npanel.grid.minor.x=element_blank(), # hide minor grid for x axis\ntext=element_text(size=14), # font aesthetics\naxis.text=element_text(size=12),\naxis.title=element_text(size=14, face=\"bold\"))\n\n}\n```\n:::\n\n\n\n\n\n\n# Read Data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhctdata = read.csv(\"Hematocrit_Dec21.csv\")\nhctdata$Date <- yday(dmy(hctdata$Date))\n#summary(hctdata)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nrawvalues <- readxl::read_excel(\"CMRO2calc.xlsx\")\nrawvalues$Subject <- as.factor(rawvalues$Subject)\nrawvalues$Sex <- as.factor(rawvalues$Sex)\nrawvalues$DOB <- as.Date(rawvalues$DOB)\nrawvalues$DOB <- format(rawvalues$DOB, format = \"%d/%m/%Y\")\nrawvalues$`MRI Scan Date` <- as.Date(rawvalues$`MRI Scan Date`)\nrawvalues$`MRI Scan Date` <- format(rawvalues$`MRI Scan Date`, format = \"%d/%m/%Y\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nrawvalues$PMA <- rawvalues$`CGA on Scan Day (Week)` + rawvalues$`CGA on Scan Day (Day)`/7\nrawvalues$GA <- rawvalues$`GA at birth (week)` + rawvalues$`GA at Birth (day)`/7\n```\n:::\n\n\n\n\n\n# Hct Calculation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhctfunc <- function(x,dataframe=newdata) {\n  arg_name0 <- deparse(substitute(x))\n  arg_name0 <- formatC(x, width = 2, format = \"d\", flag = \"0\")\n  arg_name <- paste(\"sub\", arg_name0, sep=\"\")\n  subjectid <- paste(\"Sub-AMWCER\",arg_name0,sep=\"\")\n  y <- paste(\"Patient\", arg_name0, sep=\" \")\n  x2 <- hctdata %>% filter(ID==y)\n  z <- rawvalues %>% filter(Subject == subjectid) %>% pull('MRI Scan Date')\n  x2.mridate <- as.numeric(dmy(z) - dmy(\"01-01-2021\"))\n  x2.newdata <- data.frame(Date = c(x2.mridate))\n  x2.model_W1.4 <- drm(Hct ~ Date, fct=W1.4(), data=x2)\n  x2.predict <- predict(x2.model_W1.4, newdata = x2.newdata)\n  plot(x2.model_W1.4, xlim=c(min(x2$Date),max(c(x2.newdata$Date,x2$Date))), ylim=c(min(x2$Hct, x2.predict),max(c(x2.predict,x2$Hct)))) + points(x2.newdata$Date,x2.predict, col = \"red\") + points(x2.newdata$Date,x2.predict, col = \"red\") + text(x2.newdata$Date,x2.predict,signif(x2.predict,4), cex=0.65, pos=3, col = \"red\")\n  var_name <- paste(arg_name,\".pred\", sep=\"\")\n  x2.predict <- as.data.frame(x2.predict)\n  dataframe[dataframe$Subject==subjectid, \"Hct\"] <- x2.predict\n  newdata <<- dataframe\n}\n\nnewdata <- rawvalues\nnewdata['Hct'] <- NA\nx <- c(1:18,20)\nfor (val in x) {\n  hctfunc(val)\n}\n```\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-10.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in sqrt(diag(varMat)): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-15.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-16.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-17.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-18.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-5-19.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npipelinevalues <- read.csv(\"pipeline_output_v1.csv\")\npipelinevalues <- pipelinevalues %>% dplyr::rename(Subject = Subject_ID)\npipelinevalues <- pipelinevalues %>% dplyr::select(!c(GA, PMA))\n\nnewdata$Subject <- gsub('Sub-', '', newdata$Subject)\nalldata <- merge(newdata,pipelinevalues,by=\"Subject\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#New column with sum of total days invasive and total days noninvasive\nalldata$Total_INNI <- alldata$Invasive + alldata$Noninvasive\n#New column with sum of total days invasive, total days noninvasive, and total days less invasive\nalldata$Total_vent <- alldata$Invasive + alldata$Noninvasive + alldata$Less_Invasive\n#New column with sum of total days noninvaisve, and total days less invasive\nalldata$Total_NILI <- alldata$Noninvasive + alldata$Less_Invasive\n#New column for CSaO2 * 100\nalldata$CSaO2_P <- alldata$CSaO2 * 100\n#New column for Hct * 100\nalldata$Hct_P <- alldata$Hct * 100\n#New column with percent of days on invasive\nalldata$IN_P <- alldata$Invasive / (alldata$Invasive + alldata$Less_Invasive + alldata$Noninvasive)\n#New column with percent of days on noninvasive\nalldata$LI_P <- alldata$Noninvasive / (alldata$Invasive + alldata$Less_Invasive + alldata$Noninvasive)\n#New column with percent of days on less invasive\nalldata$NI_P <- alldata$Less_Invasive / (alldata$Invasive + alldata$Less_Invasive + alldata$Noninvasive)\n#New column with proportion of days on ventilation\nalldata$Vent_P <- (alldata$Invasive + alldata$Noninvasive + alldata$Less_Invasive) / alldata$NICU\n#New column with days on room air\nalldata$roomair <- alldata$NICU - (alldata$Invasive + alldata$Noninvasive + alldata$Less_Invasive)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nchiox = -0.03*4*pi\nchido = 0.21*4*pi\nalldata$Hbt <- alldata$Hct/(3*0.0165)\nalldata$chi_veiniminuscsf <- alldata$Avg_Chi_Vein_Segmen_p1thr - alldata$CSF_Chi\nalldata$CSvO2 <- 1 - (alldata$chi_veiniminuscsf - (chiox*alldata$Hct))/(chido*alldata$Hct)\nalldata$OEF <- (alldata$CSaO2 - alldata$CSvO2)/alldata$CSaO2\nalldata$GM_CMRO2 <- alldata$GM_CBF*alldata$OEF*alldata$Hbt\nalldata$WM_CMRO2 <- alldata$WM_CBF*alldata$OEF*alldata$Hbt\nalldata$Cerebellum_CMRO2 <- alldata$Cerebellum_CBF*alldata$OEF*alldata$Hbt\nalldata$Deep_GM_CMRO2 <- alldata$Deep_GM_CBF*alldata$OEF*alldata$Hbt\nalldata$Brain_Stem_CMRO2 <- alldata$Brain_Stem_CBF*alldata$OEF*alldata$Hbt\nalldata$Hip_and_Amyg_CMRO2 <- alldata$Hip_and_Amyg_CBF*alldata$OEF*alldata$Hbt\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#New column for CSvO2 * 100\nalldata$CSvO2_P <- alldata$CSvO2 * 100\n#New column for OEF * 100\nalldata$OEF_P <- alldata$OEF * 100\nalldata[is.na(alldata)] = 0\n```\n:::\n\n\n\n\n\n# Initial Stats\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nknitr::kable(allstats <- describe(alldata))\n```\n\n::: {.cell-output-display}\n\n\n|                           | vars|  n|          mean|           sd|        median|       trimmed|          mad|           min|           max|        range|       skew|   kurtosis|           se|\n|:--------------------------|----:|--:|-------------:|------------:|-------------:|-------------:|------------:|-------------:|-------------:|------------:|----------:|----------:|------------:|\n|Subject                    |    1| 19|  1.000000e+01| 5.627314e+00|  1.000000e+01|  1.000000e+01| 7.413000e+00|  1.000000e+00|  1.900000e+01| 1.800000e+01|  0.0000000| -1.3904709|    1.2909944|\n|Sex                        |    2| 19|  1.526316e+00| 5.129892e-01|  2.000000e+00|  1.529412e+00| 0.000000e+00|  1.000000e+00|  2.000000e+00| 1.000000e+00| -0.0971979| -2.0925208|    0.1176878|\n|BW                         |    3| 19|  1.276053e+03| 2.948707e+02|  1.304000e+03|  1.279235e+03| 3.439632e+02|  7.740000e+02|  1.724000e+03| 9.500000e+02| -0.0230148| -1.2077940|   67.6479740|\n|GA at birth (week)         |    4| 19|  2.847368e+01| 1.678902e+00|  2.800000e+01|  2.852941e+01| 1.482600e+00|  2.500000e+01|  3.100000e+01| 6.000000e+00| -0.1236631| -0.8086173|    0.3851666|\n|GA at Birth (day)          |    5| 19|  2.263158e+00| 2.104020e+00|  2.000000e+00|  2.176471e+00| 2.965200e+00|  0.000000e+00|  6.000000e+00| 6.000000e+00|  0.5184178| -0.9717412|    0.4826953|\n|DOB                        |    6| 19|  6.789474e+00| 4.184348e+00|  7.000000e+00|  6.705882e+00| 4.447800e+00|  1.000000e+00|  1.400000e+01| 1.300000e+01|  0.0928341| -1.3406587|    0.9599554|\n|MRI Scan Date              |    7| 19|  7.105263e+00| 3.970653e+00|  7.000000e+00|  7.117647e+00| 4.447800e+00|  1.000000e+00|  1.300000e+01| 1.200000e+01|  0.0221619| -1.3581767|    0.9109302|\n|CGA on Scan Day (Week)     |    8| 19|  4.000000e+01| 1.414214e+00|  4.000000e+01|  3.994118e+01| 1.482600e+00|  3.700000e+01|  4.400000e+01| 7.000000e+00|  0.6698906|  1.5789474|    0.3244428|\n|CGA on Scan Day (Day)      |    9| 19|  2.526316e+00| 1.611363e+00|  3.000000e+00|  2.529412e+00| 1.482600e+00|  0.000000e+00|  5.000000e+00| 5.000000e+00| -0.1580636| -1.2253915|    0.3696721|\n|Weight on Scan Day (kg)    |   10| 19|  3.396579e+00| 5.977157e-01|  3.330000e+00|  3.408235e+00| 6.745830e-01|  2.290000e+00|  4.305000e+00| 2.015000e+00| -0.1343141| -1.2438874|    0.1371254|\n|Length on Scan Day (cm)    |   11| 19|  4.922368e+01| 2.930793e+00|  5.000000e+01|  4.939706e+01| 2.223900e+00|  4.250000e+01|  5.300000e+01| 1.050000e+01| -0.9032065| -0.0493731|    0.6723700|\n|Head Cir. on Scan Day (cm) |   12| 19|  3.513158e+01| 1.323842e+00|  3.550000e+01|  3.511765e+01| 1.482600e+00|  3.300000e+01|  3.750000e+01| 4.500000e+00| -0.1714567| -1.2872346|    0.3037103|\n|CSaO2                      |   13| 19|  9.827895e-01| 1.537160e-02|  9.890000e-01|  9.845882e-01| 1.186080e-02|  9.360000e-01|  9.990000e-01| 6.300000e-02| -1.4032691|  1.8760110|    0.0035265|\n|PMA                        |   14| 19|  4.036090e+01| 1.404858e+00|  4.057143e+01|  4.031933e+01| 1.270800e+00|  3.742857e+01|  4.400000e+01| 6.571429e+00|  0.4184248|  0.5962444|    0.3222964|\n|GA                         |   15| 19|  2.879699e+01| 1.675701e+00|  2.885714e+01|  2.889076e+01| 2.118000e+00|  2.500000e+01|  3.100000e+01| 6.000000e+00| -0.5063238| -0.6399187|    0.3844321|\n|Hct                        |   16| 19|  2.965435e-01| 3.493560e-02|  2.903233e-01|  2.948980e-01| 2.206850e-02|  2.412795e-01|  3.797808e-01| 1.385013e-01|  0.5630232| -0.0599734|    0.0080148|\n|CSF_Volume                 |   17| 19|  1.024565e+05| 1.690180e+04|  9.876265e+04|  1.016667e+05| 1.782804e+04|  8.029043e+04|  1.380505e+05| 5.776009e+04|  0.5803560| -0.8806700| 3877.5397957|\n|GM_Volume                  |   18| 19|  1.406289e+05| 2.083372e+04|  1.410776e+05|  1.406767e+05| 2.208167e+04|  9.845987e+04|  1.819856e+05| 8.352571e+04| -0.0406308| -0.5357694| 4779.5822419|\n|WM_Volume                  |   19| 19|  1.582211e+05| 1.433010e+04|  1.576880e+05|  1.585026e+05| 1.440434e+04|  1.275475e+05|  1.841099e+05| 5.656241e+04| -0.1810337| -0.7242151| 3287.5497194|\n|Bg_Volume                  |   20| 19|  1.544704e+05| 2.187562e+04|  1.515221e+05|  1.531829e+05| 1.222960e+04|  1.263685e+05|  2.044604e+05| 7.809183e+04|  0.7999608| -0.1350893| 5018.6123919|\n|Ventricle_Volume           |   21| 19|  7.974358e+03| 2.572231e+03|  7.446632e+03|  7.624511e+03| 1.470662e+03|  5.773444e+03|  1.612267e+04| 1.034922e+04|  1.9287633|  3.1667780|  590.1103152|\n|Cerebellum_Volume          |   22| 19|  2.504058e+04| 3.943031e+03|  2.441780e+04|  2.489130e+04| 3.885263e+03|  1.724647e+04|  3.537257e+04| 1.812610e+04|  0.5536431|  0.5817544|  904.5933728|\n|Deep_GM_Volume             |   23| 19|  2.689108e+04| 2.763229e+03|  2.631196e+04|  2.689698e+04| 2.708736e+03|  2.170566e+04|  3.197614e+04| 1.027048e+04|  0.1403784| -1.0113430|  633.9281144|\n|Brain_Stem_Volume          |   24| 19|  5.902329e+03| 4.529662e+02|  5.780770e+03|  5.879107e+03| 3.294282e+02|  5.189874e+03|  7.009564e+03| 1.819691e+03|  0.7499498| -0.1176460|  103.9175671|\n|Hip_and_Amyg_Volume        |   25| 19|  2.537384e+03| 2.274147e+02|  2.493605e+03|  2.533629e+03| 2.841771e+02|  2.163973e+03|  2.974624e+03| 8.106506e+02|  0.1719723| -0.8866616|   52.1725112|\n|CSF_Chi                    |   26| 19|  5.088800e-03| 1.276400e-03|  5.343000e-03|  5.135100e-03| 1.666400e-03|  2.504000e-03|  6.887000e-03| 4.383000e-03| -0.2368056| -1.1189033|    0.0002928|\n|GM_Chi                     |   27| 19| -2.872800e-03| 6.320000e-04| -2.778000e-03| -2.885800e-03| 5.723000e-04| -3.920000e-03| -1.604000e-03| 2.316000e-03|  0.2265719| -0.8387504|    0.0001450|\n|WM_Chi                     |   28| 19| -7.397000e-04| 7.034000e-04| -6.630000e-04| -6.928000e-04| 8.584000e-04| -2.503000e-03|  2.250000e-04| 2.728000e-03| -0.6792824| -0.2316505|    0.0001614|\n|BG_Chi                     |   29| 19|  6.034500e-03| 9.791600e-03|  4.267000e-03|  5.844200e-03| 9.270700e-03| -8.214000e-03|  2.351800e-02| 3.173200e-02|  0.4256495| -1.2146710|    0.0022464|\n|Ventricle_Chi              |   30| 19|  1.179410e-02| 4.332200e-03|  1.147400e-02|  1.162570e-02| 5.393700e-03|  6.080000e-03|  2.037000e-02| 1.429000e-02|  0.3862581| -1.1825447|    0.0009939|\n|Cerebellum_Chi             |   31| 19| -2.535600e-03| 1.706900e-03| -2.399000e-03| -2.505000e-03| 1.117900e-03| -6.259000e-03|  6.680000e-04| 6.927000e-03| -0.0717802| -0.3106321|    0.0003916|\n|Deep_GM_Chi                |   32| 19| -7.642400e-03| 1.685600e-03| -7.206000e-03| -7.527100e-03| 1.286900e-03| -1.207600e-02| -5.169000e-03| 6.907000e-03| -0.9370980|  0.4339365|    0.0003867|\n|Brain_Stem_Chi             |   33| 19| -7.911900e-03| 3.580900e-03| -8.667000e-03| -7.941800e-03| 3.266200e-03| -1.441300e-02| -9.030000e-04| 1.351000e-02|  0.4514329| -0.5894009|    0.0008215|\n|Hip_and_Amyg_Chi           |   34| 19|  2.117800e-03| 5.399000e-03|  2.843000e-03|  2.782800e-03| 3.295800e-03| -1.708600e-02|  1.001700e-02| 2.710300e-02| -2.1457929|  5.7492150|    0.0012386|\n|Avg_Chi_Vein_p15thr        |   35| 19|  2.271406e-01| 2.452720e-02|  2.262390e-01|  2.272608e-01| 1.900690e-02|  1.818270e-01|  2.704110e-01| 8.858400e-02| -0.0839482| -0.8122127|    0.0056269|\n|Avg_Chi_Vein_Segmen_p1thr  |   36| 19|  1.733378e-01| 2.282030e-02|  1.727670e-01|  1.727234e-01| 1.728420e-02|  1.362880e-01|  2.208330e-01| 8.454500e-02|  0.1854517| -0.7249725|    0.0052353|\n|CSF_CBF                    |   37| 19|  1.200480e+01| 3.156527e+00|  1.239949e+01|  1.204934e+01| 3.023736e+00|  5.743607e+00|  1.750877e+01| 1.176516e+01| -0.0816599| -0.7344930|    0.7241570|\n|GM_CBF                     |   38| 19|  1.430068e+01| 4.248092e+00|  1.540905e+01|  1.444368e+01| 4.707252e+00|  5.373244e+00|  2.079716e+01| 1.542392e+01| -0.3225231| -0.8148209|    0.9745790|\n|WM_CBF                     |   39| 19|  1.118311e+01| 3.110537e+00|  1.133164e+01|  1.129104e+01| 3.378537e+00|  4.944177e+00|  1.558721e+01| 1.064303e+01| -0.3823694| -1.0942990|    0.7136063|\n|BG_CBF                     |   40| 19|  1.408752e+01| 2.310920e+00|  1.472643e+01|  1.414138e+01| 1.960777e+00|  9.152971e+00|  1.810630e+01| 8.953331e+00| -0.4085498| -0.5702957|    0.5301615|\n|Ventricle_CBF              |   41| 19|  1.009971e+01| 3.069492e+00|  9.584531e+00|  1.016550e+01| 3.353084e+00|  4.649106e+00|  1.443201e+01| 9.782899e+00| -0.1724825| -1.2701754|    0.7041898|\n|Cerebellum_CBF             |   42| 19|  2.177752e+01| 8.273928e+00|  2.214367e+01|  2.185477e+01| 9.210684e+00|  7.297718e+00|  3.494411e+01| 2.764639e+01|  0.0697087| -1.0787500|    1.8981692|\n|Deep_GM_CBF                |   43| 19|  1.810092e+01| 6.632392e+00|  1.730980e+01|  1.805073e+01| 6.612396e+00|  5.955298e+00|  3.109979e+01| 2.514449e+01|  0.2081908| -0.8123814|    1.5215751|\n|Brain_Stem_CBF             |   44| 19|  2.715718e+01| 1.105268e+01|  2.696516e+01|  2.726638e+01| 1.006341e+01|  7.143075e+00|  4.531499e+01| 3.817191e+01|  0.1090950| -0.9355707|    2.5356583|\n|Hip_and_Amyg_CBF           |   45| 19|  1.998453e+01| 6.847789e+00|  2.042521e+01|  2.006934e+01| 7.722819e+00|  7.166507e+00|  3.136067e+01| 2.419417e+01| -0.0358662| -0.8563460|    1.5709906|\n|Invasive                   |   46| 19|  4.947368e+00| 8.072406e+00|  2.000000e+00|  3.705882e+00| 2.965200e+00|  0.000000e+00|  3.100000e+01| 3.100000e+01|  1.9514868|  3.1464048|    1.8519370|\n|Noninvasive                |   47| 19|  2.415789e+01| 1.590689e+01|  1.900000e+01|  2.335294e+01| 1.186080e+01|  6.000000e+00|  5.600000e+01| 5.000000e+01|  0.8014502| -0.7232836|    3.6492915|\n|Less_Invasive              |   48| 19|  9.421053e+00| 8.146682e+00|  7.000000e+00|  9.058824e+00| 5.930400e+00|  0.000000e+00|  2.500000e+01| 2.500000e+01|  0.7012165| -0.7546060|    1.8689769|\n|Antibiotics                |   49| 19|  7.421053e+00| 8.153498e+00|  3.000000e+00|  6.705882e+00| 4.447800e+00|  0.000000e+00|  2.700000e+01| 2.700000e+01|  1.3033636|  0.4388917|    1.8705408|\n|Breastmilk                 |   50| 19|  3.689474e+01| 2.615742e+01|  3.800000e+01|  3.529412e+01| 2.520420e+01|  2.000000e+00|  9.900000e+01| 9.700000e+01|  0.5461878| -0.3723338|    6.0009233|\n|CPAP                       |   51| 19|  1.594737e+01| 9.436770e+00|  1.300000e+01|  1.505882e+01| 7.413000e+00|  6.000000e+00|  4.100000e+01| 3.500000e+01|  1.2795190|  0.9218807|    2.1649436|\n|Donormilk                  |   52| 19|  1.305263e+01| 1.313804e+01|  5.000000e+00|  1.235294e+01| 7.413000e+00|  0.000000e+00|  3.800000e+01| 3.800000e+01|  0.5757295| -1.3711631|    3.0140739|\n|Formula                    |   53| 19|  4.894737e+00| 1.152724e+01|  0.000000e+00|  2.823529e+00| 0.000000e+00|  0.000000e+00|  4.500000e+01| 4.500000e+01|  2.3646590|  5.0183019|    2.6445295|\n|HFJV                       |   54| 19|  1.210526e+00| 3.923985e+00|  0.000000e+00|  4.117647e-01| 0.000000e+00|  0.000000e+00|  1.600000e+01| 1.600000e+01|  2.9606480|  7.8780707|    0.9002240|\n|HFOV                       |   55| 19|  6.315789e-01| 2.752989e+00|  0.000000e+00|  0.000000e+00| 0.000000e+00|  0.000000e+00|  1.200000e+01| 1.200000e+01|  3.6948008| 12.3074792|    0.6315789|\n|Highflow                   |   56| 19|  9.105263e+00| 8.279122e+00|  7.000000e+00|  8.705882e+00| 5.930400e+00|  0.000000e+00|  2.500000e+01| 2.500000e+01|  0.7520152| -0.7693657|    1.8993608|\n|Inotropes                  |   57| 19|  7.894737e-01| 2.200478e+00|  0.000000e+00|  3.529412e-01| 0.000000e+00|  0.000000e+00|  9.000000e+00| 9.000000e+00|  2.8018827|  7.3226021|    0.5048244|\n|IPPV                       |   58| 19|  3.105263e+00| 6.943380e+00|  2.000000e+00|  1.647059e+00| 2.965200e+00|  0.000000e+00|  3.100000e+01| 3.100000e+01|  3.3741320| 10.7281472|    1.5929206|\n|JET                        |   59| 19|  3.684211e-01| 1.605910e+00|  0.000000e+00|  0.000000e+00| 0.000000e+00|  0.000000e+00|  7.000000e+00| 7.000000e+00|  3.6948008| 12.3074792|    0.3684211|\n|Lowflow_Air                |   60| 19|  3.157895e-01| 1.376494e+00|  0.000000e+00|  0.000000e+00| 0.000000e+00|  0.000000e+00|  6.000000e+00| 6.000000e+00|  3.6948008| 12.3074792|    0.3157895|\n|Narcotic_Infusion          |   61| 19|  3.000000e+00| 5.587685e+00|  1.000000e+00|  2.176471e+00| 1.482600e+00|  0.000000e+00|  2.000000e+01| 2.000000e+01|  1.9277537|  2.4421523|    1.2819028|\n|NI_Ventilation             |   62| 19|  8.210526e+00| 1.311309e+01|  3.000000e+00|  6.823529e+00| 4.447800e+00|  0.000000e+00|  4.000000e+01| 4.000000e+01|  1.6025651|  0.9593290|    3.0083499|\n|NPO                        |   63| 19|  3.000000e+00| 3.771236e+00|  1.000000e+00|  2.647059e+00| 1.482600e+00|  0.000000e+00|  1.200000e+01| 1.200000e+01|  1.0303494| -0.3074244|    0.8651809|\n|Oxygen                     |   64| 19|  9.789474e+00| 1.810334e+01|  1.000000e+00|  7.117647e+00| 1.482600e+00|  0.000000e+00|  6.500000e+01| 6.500000e+01|  1.8600959|  2.4159329|    4.1531915|\n|PAL                        |   65| 19|  5.263160e-02| 2.294157e-01|  0.000000e+00|  0.000000e+00| 0.000000e+00|  0.000000e+00|  1.000000e+00| 1.000000e+00|  3.6948008| 12.3074792|    0.0526316|\n|PICC                       |   66| 19|  1.047368e+01| 1.237546e+01|  1.100000e+01|  9.235294e+00| 1.630860e+01|  0.000000e+00|  4.200000e+01| 4.200000e+01|  1.0672095|  0.1612296|    2.8391256|\n|PIV                        |   67| 19|  4.736842e+00| 5.970689e+00|  3.000000e+00|  4.176471e+00| 4.447800e+00|  0.000000e+00|  1.900000e+01| 1.900000e+01|  1.3525571|  0.4515423|    1.3697699|\n|Sedatives                  |   68| 19|  9.473684e-01| 2.676517e+00|  0.000000e+00|  5.294118e-01| 0.000000e+00|  0.000000e+00|  9.000000e+00| 9.000000e+00|  2.3589190|  3.8629018|    0.6140351|\n|Skin_to_Skin               |   69| 19|  2.115789e+01| 9.081502e+00|  1.800000e+01|  2.058824e+01| 8.895600e+00|  9.000000e+00|  4.300000e+01| 3.400000e+01|  0.5739507| -0.5190217|    2.0834395|\n|TPN                        |   70| 19|  1.584211e+01| 1.057914e+01|  1.100000e+01|  1.476471e+01| 5.930400e+00|  6.000000e+00|  4.400000e+01| 3.800000e+01|  1.0736745|  0.2064364|    2.4270204|\n|Transfusion                |   71| 19|  7.894737e-01| 1.315673e+00|  0.000000e+00|  6.470588e-01| 0.000000e+00|  0.000000e+00|  4.000000e+00| 4.000000e+00|  1.4757215|  0.8898386|    0.3018360|\n|UA                         |   72| 19|  4.052632e+00| 3.487656e+00|  5.000000e+00|  3.941177e+00| 4.447800e+00|  0.000000e+00|  1.000000e+01| 1.000000e+01|  0.2188818| -1.2760886|    0.8001231|\n|UV                         |   73| 19|  6.736842e+00| 3.856338e+00|  7.000000e+00|  6.647059e+00| 2.965200e+00|  0.000000e+00|  1.500000e+01| 1.500000e+01|  0.3053109| -0.5116814|    0.8847047|\n|NICU                       |   74| 19|  5.326316e+01| 2.257049e+01|  5.300000e+01|  5.147059e+01| 2.223900e+01|  2.500000e+01|  1.120000e+02| 8.700000e+01|  0.9273246|  0.2742034|    5.1780249|\n|Total_INNI                 |   75| 19|  2.910526e+01| 2.235545e+01|  2.100000e+01|  2.705882e+01| 8.895600e+00|  6.000000e+00|  8.700000e+01| 8.100000e+01|  1.2167437|  0.3916699|    5.1286916|\n|Total_vent                 |   76| 19|  3.852632e+01| 2.301538e+01|  3.100000e+01|  3.664706e+01| 1.779120e+01|  1.300000e+01|  9.600000e+01| 8.300000e+01|  0.9853624| -0.0493422|    5.2800897|\n|Total_NILI                 |   77| 19|  3.357895e+01| 1.746843e+01|  3.000000e+01|  3.317647e+01| 1.630860e+01|  9.000000e+00|  6.500000e+01| 5.600000e+01|  0.5264463| -1.0166886|    4.0075337|\n|CSaO2_P                    |   78| 19|  9.827895e+01| 1.537162e+00|  9.890000e+01|  9.845882e+01| 1.186080e+00|  9.360000e+01|  9.990000e+01| 6.300000e+00| -1.4032691|  1.8760110|    0.3526490|\n|Hct_P                      |   79| 19|  2.965435e+01| 3.493555e+00|  2.903233e+01|  2.948980e+01| 2.206848e+00|  2.412795e+01|  3.797808e+01| 1.385013e+01|  0.5630232| -0.0599734|    0.8014765|\n|IN_P                       |   80| 19|  9.876370e-02| 1.423394e-01|  5.000000e-02|  7.942320e-02| 7.413000e-02|  0.000000e+00|  5.263158e-01| 5.263158e-01|  1.6722420|  1.9303202|    0.0326549|\n|LI_P                       |   81| 19|  6.299580e-01| 1.948738e-01|  6.212121e-01|  6.316725e-01| 1.140136e-01|  2.307692e-01|  1.000000e+00| 7.692308e-01|  0.0237817| -0.1512869|    0.0447071|\n|NI_P                       |   82| 19|  2.712783e-01| 2.225113e-01|  2.647059e-01|  2.579445e-01| 2.500071e-01|  0.000000e+00|  7.692308e-01| 7.692308e-01|  0.4473294| -0.7345998|    0.0510476|\n|Vent_P                     |   83| 19|  7.167105e-01| 2.356279e-01|  7.441860e-01|  7.290212e-01| 2.953490e-01|  2.241379e-01|  1.000000e+00| 7.758621e-01| -0.5330321| -1.0525360|    0.0540567|\n|roomair                    |   84| 19|  1.473684e+01| 1.337843e+01|  1.100000e+01|  1.382353e+01| 1.186080e+01|  0.000000e+00|  4.500000e+01| 4.500000e+01|  0.7869506| -0.6766205|    3.0692229|\n|Hbt                        |   85| 19|  5.990778e+00| 7.057687e-01|  5.865117e+00|  5.957535e+00| 4.458278e-01|  4.874334e+00|  7.672339e+00| 2.798005e+00|  0.5630232| -0.0599734|    0.1619144|\n|chi_veiniminuscsf          |   86| 19|  1.682491e-01| 2.235470e-02|  1.683080e-01|  1.674121e-01| 1.378670e-02|  1.337700e-01|  2.169560e-01| 8.318600e-02|  0.2861728| -0.6247419|    0.0051285|\n|CSvO2                      |   87| 19|  6.392395e-01| 3.975940e-02|  6.414106e-01|  6.409141e-01| 3.494070e-02|  5.540449e-01|  6.959658e-01| 1.419209e-01| -0.5101888| -0.5407964|    0.0091214|\n|OEF                        |   88| 19|  3.493396e-01| 4.272720e-02|  3.528616e-01|  3.473403e-01| 5.004960e-02|  2.928746e-01|  4.397928e-01| 1.469182e-01|  0.6268974| -0.6397780|    0.0098023|\n|GM_CMRO2                   |   89| 19|  2.948613e+01| 8.617526e+00|  3.095576e+01|  2.974816e+01| 7.722622e+00|  1.090032e+01|  4.361748e+01| 3.271716e+01| -0.3013535| -0.6645869|    1.9769960|\n|WM_CMRO2                   |   90| 19|  2.308060e+01| 6.465269e+00|  2.376673e+01|  2.327653e+01| 5.741861e+00|  1.002990e+01|  3.280041e+01| 2.277050e+01| -0.1843261| -0.9381997|    1.4832345|\n|Cerebellum_CMRO2           |   91| 19|  4.468293e+01| 1.598040e+01|  4.614214e+01|  4.492222e+01| 1.619630e+01|  1.480437e+01|  7.049345e+01| 5.568909e+01| -0.0952102| -0.9983246|    3.6661543|\n|Deep_GM_CMRO2              |   92| 19|  3.722367e+01| 1.322684e+01|  3.845176e+01|  3.704672e+01| 1.379281e+01|  1.208109e+01|  6.537438e+01| 5.329329e+01|  0.2699161| -0.3787359|    3.0344455|\n|Brain_Stem_CMRO2           |   93| 19|  5.568999e+01| 2.133567e+01|  5.582330e+01|  5.609312e+01| 2.346962e+01|  1.449065e+01|  9.003602e+01| 7.554537e+01| -0.0838440| -0.8922013|    4.8947389|\n|Hip_and_Amyg_CMRO2         |   94| 19|  4.114260e+01| 1.369379e+01|  4.172732e+01|  4.129813e+01| 1.529480e+01|  1.453819e+01|  6.510313e+01| 5.056494e+01| -0.0666767| -0.6634436|    3.1415720|\n|CSvO2_P                    |   95| 19|  6.392395e+01| 3.975937e+00|  6.414106e+01|  6.409141e+01| 3.494068e+00|  5.540449e+01|  6.959658e+01| 1.419209e+01| -0.5101888| -0.5407964|    0.9121426|\n|OEF_P                      |   96| 19|  3.493396e+01| 4.272722e+00|  3.528616e+01|  3.473403e+01| 5.004956e+00|  2.928746e+01|  4.397928e+01| 1.469182e+01|  0.6268974| -0.6397780|    0.9802298|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nknitr::kable(alldata %>% dplyr::select(GM_CBF, WM_CBF, Deep_GM_CBF, Brain_Stem_CBF, Cerebellum_CBF, Hip_and_Amyg_CBF, GM_CMRO2, WM_CMRO2, Deep_GM_CMRO2, Brain_Stem_CMRO2, Cerebellum_CMRO2, Hip_and_Amyg_CMRO2) %>% describe() %>% dplyr::select(mean,sd))\n```\n\n::: {.cell-output-display}\n\n\n|                   |     mean|        sd|\n|:------------------|--------:|---------:|\n|GM_CBF             | 14.30068|  4.248092|\n|WM_CBF             | 11.18311|  3.110537|\n|Deep_GM_CBF        | 18.10092|  6.632392|\n|Brain_Stem_CBF     | 27.15718| 11.052678|\n|Cerebellum_CBF     | 21.77752|  8.273928|\n|Hip_and_Amyg_CBF   | 19.98453|  6.847789|\n|GM_CMRO2           | 29.48613|  8.617526|\n|WM_CMRO2           | 23.08060|  6.465269|\n|Deep_GM_CMRO2      | 37.22367| 13.226841|\n|Brain_Stem_CMRO2   | 55.68999| 21.335672|\n|Cerebellum_CMRO2   | 44.68293| 15.980396|\n|Hip_and_Amyg_CMRO2 | 41.14260| 13.693795|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmedianvalues <- alldata %>% dplyr::select(GA,PMA,Invasive,Noninvasive,Less_Invasive,NICU,roomair, BW, `Weight on Scan Day (kg)`, `Head Cir. on Scan Day (cm)`, Sedatives, Narcotic_Infusion, Total_vent) %>% describe(quant=c(.25,.5,.75), IQR = T) %>% dplyr::select(Q0.25, Q0.5, Q0.75,IQR)\n```\n:::\n\n\n\n\n\n# Initial Data Vis\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: dayscat\n#| fig-width: 7\n#| fig-height: 7\nHist_GA <- ggplot(alldata, aes(x=GA)) + \n geom_histogram(colour=\"black\", fill=\"white\") + theme_minimalism() + ggtitle(\"Gestational Age at Birth\") + xlab(\"GA (Weeks)\") + ylim(0,5)\n\nHist_PMA <- ggplot(alldata, aes(x=PMA)) + \n geom_histogram(colour=\"black\", fill=\"white\") + theme_minimalism() + ggtitle(\"Age at Scan\") + xlab(\"PMA (Weeks)\") + ylab(\"\") + ylim(0,5)\n\nplot_daysCat1 <- ggplot(alldata, aes(x=Invasive)) +\n geom_histogram(colour=\"black\", fill=\"white\", bins=50) + theme_minimalism() + ggtitle(\"Category 1\") + xlim(0,60) + ylim(0,6) + xlab(\"\")\n\nplot_daysCat2 <- ggplot(alldata, aes(x=Noninvasive)) +\n geom_histogram(colour=\"black\", fill=\"white\") + theme_minimalism() + ggtitle(\"Category 2\")+ xlim(0,60)+ ylim(0,6) +xlab(\"Days\") + ylab(\"\")\n\nplot_daysCat3 <- ggplot(alldata, aes(x=Less_Invasive)) +\n geom_histogram(colour=\"black\", fill=\"white\") + theme_minimalism() + ggtitle(\"Category 3\")+ xlim(0,60)+ ylim(0,6) +xlab(\"\") + ylab(\"\")\n\n(GAHist_patch <- (Hist_GA | Hist_PMA) / (plot_daysCat1 | plot_daysCat2 | plot_daysCat3) + plot_layout(heights = c(1,1)))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/dayscat-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npng(file=\"GAHist.png\", width=7, height=7, units=\"in\", res=300)\nprint(GAHist_patch)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n# GA ~ Invasive\n\nIf you are born younger, are you more likely to be on more days of invasive ventilatory support?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGA_Invasive.lm <- lm(Invasive ~ GA , data=alldata)\n(GA_Invasive.lm.summary <- summary(GA_Invasive.lm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Invasive ~ GA, data = alldata)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-9.582 -4.187 -1.319  2.313 22.524 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)  79.2115    28.4640   2.783   0.0128 *\nGA           -2.5789     0.9869  -2.613   0.0182 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.016 on 17 degrees of freedom\nMultiple R-squared:  0.2866,\tAdjusted R-squared:  0.2446 \nF-statistic: 6.829 on 1 and 17 DF,  p-value: 0.01818\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGA_Invasive.predict <- ggpredict(GA_Invasive.lm, terms=c(\"GA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGA_NonInvasive.lm <- lm(Noninvasive ~ GA , data=alldata)\n(GA_NonInvasive.lm.summary <- summary(GA_NonInvasive.lm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Noninvasive ~ GA, data = alldata)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-17.020  -9.119  -3.622   4.675  29.175 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)  185.375     53.628   3.457  0.00301 **\nGA            -5.598      1.859  -3.011  0.00787 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 13.22 on 17 degrees of freedom\nMultiple R-squared:  0.3478,\tAdjusted R-squared:  0.3095 \nF-statistic: 9.066 on 1 and 17 DF,  p-value: 0.007868\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGA_NonInvasive.predict <- ggpredict(GA_NonInvasive.lm, terms=c(\"GA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGA_Less_Invasive.lm <- lm(Less_Invasive ~ GA , data=alldata)\n(GA_Less_Invasive.lm.summary <- summary(GA_Less_Invasive.lm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = Less_Invasive ~ GA, data = alldata)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-13.2216  -4.6409  -0.5248   2.2145  16.7074 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  -40.258     31.796  -1.266    0.223\nGA             1.725      1.102   1.565    0.136\n\nResidual standard error: 7.837 on 17 degrees of freedom\nMultiple R-squared:  0.1259,\tAdjusted R-squared:  0.0745 \nF-statistic: 2.449 on 1 and 17 DF,  p-value: 0.136\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGA_Less_Invasive.predict <- ggpredict(GA_Less_Invasive.lm, terms=c(\"GA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCat1_v_GAplot <- ggplot() + geom_point(data = alldata, aes(x = GA, y = Invasive))  +\n  geom_smooth(data=alldata, aes(x = GA, y = Invasive), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=GA_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high),  alpha=0.15) +\n  geom_line(data=GA_Invasive.predict, aes(x=x, y=conf.high),  linetype=\"dashed\")+\n  geom_line(data=GA_Invasive.predict, aes(x=x, y=conf.low),  linetype=\"dashed\")+\n  geom_line(data=GA_Invasive.predict, aes(x,predicted))+\n  annotate(geom=\"text\", x=29.5, y=25, label=paste(\"Adj R Sq = \", round(GA_Invasive.lm.summary$adj.r.squared,2), \"\\np = \", round(GA_Invasive.lm.summary$coefficients[2,4],2))) +\n  ylab(\"Days on Category 1\") + ylim(-7,33) + xlab(\"GA (Weeks)\") +\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nCat2_v_GAplot <- ggplot() + geom_point(data = alldata, aes(x = GA, y = Noninvasive))  +\n  geom_smooth(data=alldata, aes(x = GA, y = Noninvasive), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=GA_NonInvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high),  alpha=0.15) +\n  geom_line(data=GA_NonInvasive.predict, aes(x=x, y=conf.high),  linetype=\"dashed\")+\n  geom_line(data=GA_NonInvasive.predict, aes(x=x, y=conf.low),  linetype=\"dashed\")+\n  geom_line(data=GA_NonInvasive.predict, aes(x,predicted))+\n  annotate(geom=\"text\", x=29.5, y=53, label=paste(\"Adj R Sq = \", round(GA_NonInvasive.lm.summary$adj.r.squared,2), \"\\np = \", round(GA_NonInvasive.lm.summary$coefficients[2,4],2))) +\n  ylab(\"Days on Category 2\") +ylim(-7,63) + xlab(\"GA (Weeks)\") +\ntheme_minimalism()\n\nCat3_v_GAplot <- ggplot() + geom_point(data = alldata, aes(x = GA, y = Less_Invasive))  +\n  geom_smooth(data=alldata, aes(x = GA, y = Less_Invasive), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=GA_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high),  alpha=0.15) +\n  geom_line(data=GA_Less_Invasive.predict, aes(x=x, y=conf.high),  linetype=\"dashed\")+\n  geom_line(data=GA_Less_Invasive.predict, aes(x=x, y=conf.low),  linetype=\"dashed\")+\n  geom_line(data=GA_Less_Invasive.predict, aes(x,predicted))+\n  annotate(geom=\"text\", x=29.5, y=35, label=paste(\"Adj R Sq = \", round(GA_Less_Invasive.lm.summary$adj.r.squared,2), \"\\np = \", round(GA_Less_Invasive.lm.summary$coefficients[2,4],2))) +\n  ylab(\"Days on Category 3\") +ylim(-7,37) + xlab(\"GA (Weeks)\") +\ntheme_minimalism()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: linreg\n#| fig-width: 7\n#| fig-height: 7\ndesign <- \"AABB\n           #CC#\"\n(Cat_v_GA_patch <- Cat1_v_GAplot + Cat2_v_GAplot + Cat3_v_GAplot +\n  plot_layout(design = design))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/linreg-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npng(file=\"Categories_vs_GA.png\", width=7, height=7, units=\"in\", res=300)\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Tissue Volume ~ PMA\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Select columns ending with \"_Volume\"\nvolume_cols <- grep(\"_Volume$\", colnames(alldata), perl=TRUE)\n\n# Divide values by 1000 using lapply\nalldata[, volume_cols] <- lapply(alldata[, volume_cols], function(x) x / 1000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nVolume.lm <- lm(GM_Volume ~ GA + PMA, data=alldata)\nVolume.lm.summary <- summary(Volume.lm)\nVolume.predict <- ggpredict(Volume.lm, terms=c(\"PMA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Volume.lm.summary$coefficients[3,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Volume.lm.summary$coefficients[3,4],2)))\nGMVolume_PMA <- ggplot() + geom_point(data = alldata, aes(x = PMA, y = GM_Volume))  +\n  geom_smooth(data=alldata, aes(x = PMA, y = GM_Volume), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Volume.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Volume.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=38.8, y=180, label=paste(\"Adj R Sq = \", round(Volume.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  ylab(\"GM Volume (mL)\") + xlab(\"\") +\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nVolume.lm <- lm(WM_Volume ~ GA + PMA, data=alldata)\nVolume.lm.summary <- summary(Volume.lm)\nVolume.predict <- ggpredict(Volume.lm, terms=c(\"PMA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Volume.lm.summary$coefficients[3,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Volume.lm.summary$coefficients[3,4],2)))\nWMVolume_PMA <- ggplot() + geom_point(data = alldata, aes(x = PMA, y = WM_Volume))  +\n  geom_smooth(data=alldata, aes(x = PMA, y = WM_Volume), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Volume.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Volume.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=38.8, y=180, label=paste(\"Adj R Sq = \", round(Volume.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  ylab(\"WM Volume (mL)\") + xlab(\"\") +\ntheme_minimalism()\n\n\nVolume.lm <- lm(Cerebellum_Volume ~ GA + PMA, data=alldata)\nVolume.lm.summary <- summary(Volume.lm)\nVolume.predict <- ggpredict(Volume.lm, terms=c(\"PMA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Volume.lm.summary$coefficients[3,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Volume.lm.summary$coefficients[3,4],2)))\nCerebellumVolume_PMA <- ggplot() + geom_point(data = alldata, aes(x = PMA, y = Cerebellum_Volume))  +\n  geom_smooth(data=alldata, aes(x = PMA, y = Cerebellum_Volume), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Volume.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Volume.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=38.8, y=35, label=paste(\"Adj R Sq = \", round(Volume.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  ylab(\"Cerebellum Volume (mL)\") + xlab(\"\") +\ntheme_minimalism()\n\nVolume.lm <- lm(Deep_GM_Volume ~ GA + PMA, data=alldata)\nVolume.lm.summary <- summary(Volume.lm)\nVolume.predict <- ggpredict(Volume.lm, terms=c(\"PMA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Volume.lm.summary$coefficients[3,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Volume.lm.summary$coefficients[3,4],2)))\nDeepGMVolume_PMA <- ggplot() + geom_point(data = alldata, aes(x = PMA, y = Deep_GM_Volume))  +\n  geom_smooth(data=alldata, aes(x = PMA, y = Deep_GM_Volume), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Volume.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Volume.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=38.8, y=32, label=paste(\"Adj R Sq = \", round(Volume.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  ylab(\"Deep GM Volume (mL)\") + xlab(\"\") +\ntheme_minimalism()\n\nVolume.lm <- lm(Brain_Stem_Volume ~ GA + PMA, data=alldata)\nVolume.lm.summary <- summary(Volume.lm)\nVolume.predict <- ggpredict(Volume.lm, terms=c(\"PMA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Volume.lm.summary$coefficients[3,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Volume.lm.summary$coefficients[3,4],2)))\nBrainstemVolume_PMA <- ggplot() + geom_point(data = alldata, aes(x = PMA, y = Brain_Stem_Volume))  +\n  geom_smooth(data=alldata, aes(x = PMA, y = Brain_Stem_Volume), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Volume.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Volume.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=38.8, y=7, label=paste(\"Adj R Sq = \", round(Volume.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  ylab(\"Brainstem Volume (mL)\") + xlab(\"Age at Scan (Weeks)\") +\ntheme_minimalism()\n\nVolume.lm <- lm(Hip_and_Amyg_Volume ~ GA + PMA, data=alldata)\nVolume.lm.summary <- summary(Volume.lm)\nVolume.predict <- ggpredict(Volume.lm, terms=c(\"PMA\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Volume.lm.summary$coefficients[3,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Volume.lm.summary$coefficients[3,4],2)))\nHipAmygVolume_PMA <- ggplot() + geom_point(data = alldata, aes(x = PMA, y = Hip_and_Amyg_Volume))  +\n  geom_smooth(data=alldata, aes(x = PMA, y = Hip_and_Amyg_Volume), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Volume.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Volume.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=38.8, y=3, label=paste(\"Adj R Sq = \", round(Volume.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  ylab(\"Hip and Amyg Volume (mL)\") + xlab(\"\") +\ntheme_minimalism()\n\n(Vol_v_PMA_patch <- GMVolume_PMA + WMVolume_PMA + DeepGMVolume_PMA + CerebellumVolume_PMA + BrainstemVolume_PMA + HipAmygVolume_PMA)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Invasive\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCBF_Invasive.lm <- lm(GM_CBF ~ GA + PMA + Invasive, data=alldata)\nCBF_Invasive.lm.summary <- summary(GMCBF_Invasive.lm)\nGMCBF_Invasive.lm.summary = CBF_Invasive.lm.summary\nCBF_Invasive.predict <- ggpredict(GMCBF_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Invasive.lm.summary$coefficients[4,4],2)))\nGMCBF_Inv_plot <-ggplot() + geom_point(data = alldata, aes(x = Invasive, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=24, label=paste(\"Adj R Sq = \", round(CBF_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nWMCBF_Invasive.lm <- lm(WM_CBF ~ GA + PMA + Invasive, data=alldata)\nCBF_Invasive.lm.summary <- summary(WMCBF_Invasive.lm)\nWMCBF_Invasive.lm.summary = CBF_Invasive.lm.summary\nCBF_Invasive.predict <- ggpredict(WMCBF_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Invasive.lm.summary$coefficients[4,4],2)))\nWMCBF_Inv_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=18, label=paste(\"Adj R Sq = \", round(CBF_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nDeepGMCBF_Invasive.lm <- lm(Deep_GM_CBF ~ GA + PMA + Invasive, data=alldata)\nCBF_Invasive.lm.summary <- summary(DeepGMCBF_Invasive.lm)\nDeepGMCBF_Invasive.lm.summary = CBF_Invasive.lm.summary\nCBF_Invasive.predict <- ggpredict(DeepGMCBF_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Invasive.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_Inv_plot <-ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=6, y=30, label=paste(\"Adj R Sq = \", round(CBF_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCerebellumCBF_Invasive.lm <- lm(Cerebellum_CBF ~ GA + PMA + Invasive, data=alldata)\nCBF_Invasive.lm.summary <- summary(CerebellumCBF_Invasive.lm)\nCerebellumCBF_Invasive.lm.summary = CBF_Invasive.lm.summary\nCBF_Invasive.predict <- ggpredict(CerebellumCBF_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Invasive.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=40, label=paste(\"Adj R Sq = \", round(CBF_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nBrainstemCBF_Invasive.lm <- lm(Brain_Stem_CBF ~ GA + PMA + Invasive, data=alldata)\nCBF_Invasive.lm.summary <- summary(BrainstemCBF_Invasive.lm)\nBrainstemCBF_Invasive.lm.summary = CBF_Invasive.lm.summary\nCBF_Invasive.predict <- ggpredict(BrainstemCBF_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Invasive.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Brain_Stem_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CBF (ml/100g/min)\", x = \"Category 1 (Days)\")+\n  annotate(geom=\"text\", x=5, y=52, label=paste(\"Adj R Sq = \", round(CBF_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nHipandamygCBF_Invasive.lm <- lm(Hip_and_Amyg_CBF ~ GA + PMA + Invasive, data=alldata)\nCBF_Invasive.lm.summary <- summary(HipandamygCBF_Invasive.lm)\nHipandamygCBF_Invasive.lm.summary = CBF_Invasive.lm.summary\nCBF_Invasive.predict <- ggpredict(HipandamygCBF_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Invasive.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=34, label=paste(\"Adj R Sq = \", round(CBF_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CBF_v_Invasive_patch <- GMCBF_Inv_plot + WMCBF_Inv_plot + DeepGMCBF_Inv_plot + CerebellumCBF_Invasive_plot + BrainstemCBF_Invasive_plot + HipandAmygCBF_Invasive_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Noninvasive\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCBF_Noninvasive.lm <- lm(GM_CBF ~ PMA + GA + Noninvasive, data=alldata)\nCBF_Noninvasive.lm.summary <- summary(GMCBF_Noninvasive.lm)\nGMCBF_Noninvasive.lm.summary = CBF_Noninvasive.lm.summary\nCBF_Noninvasive.predict <- ggpredict(GMCBF_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Noninvasive.lm.summary$coefficients[4,4],2)))\nGMCBF_Noninvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CBF\\n (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=25, label=paste(\"Adj R Sq = \", round(CBF_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nWMCBF_Noninvasive.lm <- lm(WM_CBF ~ PMA + GA + Noninvasive, data=alldata)\nCBF_Noninvasive.lm.summary <- summary(WMCBF_Noninvasive.lm)\nWMCBF_Noninvasive.lm.summary = CBF_Noninvasive.lm.summary\nCBF_Noninvasive.predict <- ggpredict(WMCBF_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Noninvasive.lm.summary$coefficients[4,4],2)))\nWMCBF_Noninvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CBF\\n (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=18, label=paste(\"Adj R Sq = \", round(CBF_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nDeepGMCBF_Noninvasive.lm <- lm(Deep_GM_CBF ~ PMA + GA + Noninvasive, data=alldata)\nCBF_Noninvasive.lm.summary <- summary(DeepGMCBF_Noninvasive.lm)\nDeepGMCBF_Noninvasive.lm.summary = CBF_Noninvasive.lm.summary\nCBF_Noninvasive.predict <- ggpredict(DeepGMCBF_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Noninvasive.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_Noninvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CBF\\n (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=34, label=paste(\"Adj R Sq = \", round(CBF_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCerebellumCBF_Noninvasive.lm <- lm(Cerebellum_CBF ~ PMA + GA + Noninvasive, data=alldata)\nCBF_Noninvasive.lm.summary <- summary(CerebellumCBF_Noninvasive.lm)\nCerebellumCBF_Noninvasive.lm.summary = CBF_Noninvasive.lm.summary\nCBF_Noninvasive.predict <- ggpredict(CerebellumCBF_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Noninvasive.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_Noninvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CBF\\n (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=42, label=paste(\"Adj R Sq = \", round(CBF_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nBrainstemCBF_Noninvasive.lm <- lm(Brain_Stem_CBF ~ PMA + GA + Noninvasive, data=alldata)\nCBF_Noninvasive.lm.summary <- summary(BrainstemCBF_Noninvasive.lm)\nBrainstemCBF_Noninvasive.lm.summary = CBF_Noninvasive.lm.summary\nCBF_Noninvasive.predict <- ggpredict(BrainstemCBF_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Noninvasive.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_Noninvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Brain_Stem_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CBF\\n (ml/100g/min)\", x = \"Category 2 (Days)\")+\n  annotate(geom=\"text\", x=15, y=55, label=paste(\"Adj R Sq = \", round(CBF_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nHipandamygCBF_Noninvasive.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + Noninvasive, data=alldata)\nCBF_Noninvasive.lm.summary <- summary(HipandamygCBF_Noninvasive.lm)\nHipandamygCBF_Noninvasive.lm.summary = CBF_Noninvasive.lm.summary\nCBF_Noninvasive.predict <- ggpredict(HipandamygCBF_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Noninvasive.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_Noninvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CBF\\n (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=38, label=paste(\"Adj R Sq = \", round(CBF_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CBF_v_NonInvasive_patch <- GMCBF_Noninvasive_plot + WMCBF_Noninvasive_plot + DeepGMCBF_Noninvasive_plot + CerebellumCBF_Noninvasive_plot + BrainstemCBF_Noninvasive_plot + HipandAmygCBF_Noninvasive_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Less Invasive\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCBF_Less_Invasive.lm <- lm(GM_CBF ~ PMA + GA + Less_Invasive, data=alldata)\nCBF_Less_Invasive.lm.summary <- summary(GMCBF_Less_Invasive.lm)\nGMCBF_Less_Invasive.lm.summary = CBF_Less_Invasive.lm.summary\nCBF_Less_Invasive.predict <- ggpredict(GMCBF_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Less_Invasive.lm.summary$coefficients[4,4],2)))\nGMCBF_Lessinvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CBF (ml/100g/min)\", x = \"\")+ylim(4,24)+\n  annotate(geom=\"text\", x=5, y=23, label=paste(\"Adj R Sq = \", round(CBF_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nWMCBF_Less_Invasive.lm <- lm(WM_CBF ~ PMA + GA + Less_Invasive, data=alldata)\nCBF_Less_Invasive.lm.summary <- summary(WMCBF_Less_Invasive.lm)\nWMCBF_Less_Invasive.lm.summary = CBF_Less_Invasive.lm.summary\nCBF_Less_Invasive.predict <- ggpredict(WMCBF_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Less_Invasive.lm.summary$coefficients[4,4],2)))\nWMCBF_Lessinvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CBF (ml/100g/min)\", x = \"\")+ ylim(5,20)+\n  annotate(geom=\"text\", x=5, y=18, label=paste(\"Adj R Sq = \", round(CBF_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nDeepGMCBF_Less_Invasive.lm <- lm(Deep_GM_CBF ~ PMA + GA + Less_Invasive, data=alldata)\nCBF_Less_Invasive.lm.summary <- summary(DeepGMCBF_Less_Invasive.lm)\nDeepGMCBF_Less_Invasive.lm.summary = CBF_Less_Invasive.lm.summary\nCBF_Less_Invasive.predict <- ggpredict(DeepGMCBF_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Less_Invasive.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_Lessinvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=30, label=paste(\"Adj R Sq = \", round(CBF_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCerebellumCBF_Less_Invasive.lm <- lm(Cerebellum_CBF ~ PMA + GA + Less_Invasive, data=alldata)\nCBF_Less_Invasive.lm.summary <- summary(CerebellumCBF_Less_Invasive.lm)\nCerebellumCBF_Less_Invasive.lm.summary = CBF_Less_Invasive.lm.summary\nCBF_Less_Invasive.predict <- ggpredict(CerebellumCBF_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Less_Invasive.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_Lessinvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CBF (ml/100g/min)\", x = \"\")+ylim(7,36)+\n  annotate(geom=\"text\", x=15, y=35, label=paste(\"Adj R Sq = \", round(CBF_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nBrainstemCBF_Less_Invasive.lm <- lm(Brain_Stem_CBF ~ PMA + GA + Less_Invasive, data=alldata)\nCBF_Less_Invasive.lm.summary <- summary(BrainstemCBF_Less_Invasive.lm)\nBrainstemCBF_Less_Invasive.lm.summary = CBF_Less_Invasive.lm.summary\nCBF_Less_Invasive.predict <- ggpredict(BrainstemCBF_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Less_Invasive.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_Lessinvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Brain_Stem_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CBF (ml/100g/min)\", x = \"Category 3 (Days)\")+ ylim(7,52)+\n  annotate(geom=\"text\", x=5, y=50, label=paste(\"Adj R Sq = \", round(CBF_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nHipandamygCBF_Less_Invasive.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + Less_Invasive, data=alldata)\nCBF_Less_Invasive.lm.summary <- summary(HipandamygCBF_Less_Invasive.lm)\nHipandamygCBF_Less_Invasive.lm.summary = CBF_Less_Invasive.lm.summary\nCBF_Less_Invasive.predict <- ggpredict(HipandamygCBF_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Less_Invasive.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_Lessinvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CBF (ml/100g/min)\", x = \"\")+ ylim(6,37)+\n  annotate(geom=\"text\", x=5, y=35, label=paste(\"Adj R Sq = \", round(CBF_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CBF_v_LessInvasive_patch <- GMCBF_Lessinvasive_plot + WMCBF_Lessinvasive_plot + DeepGMCBF_Lessinvasive_plot + CerebellumCBF_Lessinvasive_plot + BrainstemCBF_Lessinvasive_plot + HipandAmygCBF_Lessinvasive_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Roomair\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCBF_roomair.lm <- lm(GM_CBF ~ PMA + GA + roomair, data=alldata)\nCBF_roomair.lm.summary <- summary(GMCBF_roomair.lm)\nGMCBF_roomair.lm.summary = CBF_roomair.lm.summary\nCBF_roomair.predict <- ggpredict(GMCBF_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_roomair.lm.summary$coefficients[4,4],2)))\nGMCBF_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CBF\\n (ml/100g/min)\", x = \"\")+ylim(4,26)+\n  annotate(geom=\"text\", x=7, y=25, label=paste(\"Adj R Sq = \", round(CBF_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nWMCBF_roomair.lm <- lm(WM_CBF ~ PMA + GA + roomair, data=alldata)\nCBF_roomair.lm.summary <- summary(WMCBF_roomair.lm)\nWMCBF_roomair.lm.summary = CBF_roomair.lm.summary\nCBF_roomair.predict <- ggpredict(WMCBF_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_roomair.lm.summary$coefficients[4,4],2)))\nWMCBF_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CBF\\n (ml/100g/min)\", x = \"\")+ylim(3,21)+\n  annotate(geom=\"text\", x=7, y=20, label=paste(\"Adj R Sq = \", round(CBF_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nDeepGMCBF_roomair.lm <- lm(Deep_GM_CBF ~ PMA + GA + roomair, data=alldata)\nCBF_roomair.lm.summary <- summary(DeepGMCBF_roomair.lm)\nDeepGMCBF_roomair.lm.summary = CBF_roomair.lm.summary\nCBF_roomair.predict <- ggpredict(DeepGMCBF_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_roomair.lm.summary$coefficients[4,4], 4) < 0.05, \"p < 0.05\", paste(\"p = \", round(CBF_roomair.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CBF\\n (ml/100g/min)\", x = \"\")+ylim(3,38)+\n  annotate(geom=\"text\", x=7, y=37, label=paste(\"Adj R Sq = \", round(CBF_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCerebellumCBF_roomair.lm <- lm(Cerebellum_CBF ~ PMA + GA + roomair, data=alldata)\nCBF_roomair.lm.summary <- summary(CerebellumCBF_roomair.lm)\nCerebellumCBF_roomair.lm.summary = CBF_roomair.lm.summary\nCBF_roomair.predict <- ggpredict(CerebellumCBF_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_roomair.lm.summary$coefficients[4,4], 4) < 0.05, \"p < 0.05\", paste(\"p = \", round(CBF_roomair.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CBF\\n (ml/100g/min)\", x = \"\")+ylim(4,41)+\n  annotate(geom=\"text\", x=7, y=40, label=paste(\"Adj R Sq = \", round(CBF_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nBrainstemCBF_roomair.lm <- lm(Brain_Stem_CBF ~ PMA + GA + roomair, data=alldata)\nCBF_roomair.lm.summary <- summary(BrainstemCBF_roomair.lm)\nBrainstemCBF_roomair.lm.summary = CBF_roomair.lm.summary\nCBF_roomair.predict <- ggpredict(BrainstemCBF_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_roomair.lm.summary$coefficients[4,4], 4) < 0.05, \"p < 0.05\", paste(\"p = \", round(CBF_roomair.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CBF\\n (ml/100g/min)\", x = \"Room Air (Days)\")+ylim(4,58)+\n  annotate(geom=\"text\", x=7, y=57, label=paste(\"Adj R Sq = \", round(CBF_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nHipandamygCBF_roomair.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + roomair, data=alldata)\nCBF_roomair.lm.summary <- summary(HipandamygCBF_roomair.lm)\nHipandamygCBF_roomair.lm.summary = CBF_roomair.lm.summary\nCBF_roomair.predict <- ggpredict(HipandamygCBF_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_roomair.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CBF\\n (ml/100g/min)\", x = \"\")+ylim(5,38)+\n  annotate(geom=\"text\", x=7, y=37, label=paste(\"Adj R Sq = \", round(CBF_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CBF_v_Roomair_patch <- GMCBF_roomair_plot + WMCBF_roomair_plot + DeepGMCBF_roomair_plot + CerebellumCBF_roomair_plot + BrainstemCBF_roomair_plot + HipandAmygCBF_roomair_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Total Vent\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCBF_Vent.lm <- lm(GM_CBF ~ PMA + GA + Total_vent, data=alldata)\nCBF_Vent.lm.summary <- summary(CBF_Vent.lm)\nCBF_Vent.predict <- ggpredict(CBF_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent.lm.summary$coefficients[4,4],2)))\nGMCBF_Vent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=25, label=paste(\"Adj R Sq = \", round(CBF_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"GM CBF (ml/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCBF_Vent.lm <- lm(WM_CBF ~ PMA + GA + Total_vent, data=alldata)\nCBF_Vent.lm.summary <- summary(CBF_Vent.lm)\nCBF_Vent.predict <- ggpredict(CBF_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent.lm.summary$coefficients[4,4],2)))\nWMCBF_Vent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=19, label=paste(\"Adj R Sq = \", round(CBF_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"WM CBF (ml/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCBF_Vent.lm <- lm(Deep_GM_CBF ~ PMA + GA + Total_vent, data=alldata)\nCBF_Vent.lm.summary <- summary(CBF_Vent.lm)\nCBF_Vent.predict <- ggpredict(CBF_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_Vent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=38, label=paste(\"Adj R Sq = \", round(CBF_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Deep GM CBF (ml/100g/min)\", x = \"\")+ylim(7,39)+\ntheme_minimalism()\n\nCBF_Vent.lm <- lm(Cerebellum_CBF ~ PMA + GA + Total_vent, data=alldata)\nCBF_Vent.lm.summary <- summary(CBF_Vent.lm)\nCBF_Vent.predict <- ggpredict(CBF_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_Vent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=42, label=paste(\"Adj R Sq = \", round(CBF_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Cerebellum CBF (ml/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCBF_Vent.lm <- lm(Brain_Stem_CBF ~ PMA + GA + Total_vent, data=alldata)\nCBF_Vent.lm.summary <- summary(CBF_Vent.lm)\nCBF_Vent.predict <- ggpredict(CBF_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_Vent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=55, label=paste(\"Adj R Sq = \", round(CBF_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CBF (ml/100g/min)\", x = \"Sum of All Categories (Days)\")+\ntheme_minimalism()\n\nCBF_Vent.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + Total_vent, data=alldata)\nCBF_Vent.lm.summary <- summary(CBF_Vent.lm)\nCBF_Vent.predict <- ggpredict(CBF_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_Vent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=38, label=paste(\"Adj R Sq = \", round(CBF_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Hip and Amyg CBF (ml/100g/min)\", x = \"\")+\ntheme_minimalism()\n\n(CBF_v_TotalVent_patch <- GMCBF_Vent_plot + WMCBF_Vent_plot + DeepGMCBF_Vent_plot + CerebellumCBF_Vent_plot + BrainstemCBF_Vent_plot + HipandAmygCBF_Vent_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Porportion of days on ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCBF_Vent_P.lm <- lm(GM_CBF ~ PMA + GA + Vent_P, data=alldata)\nCBF_Vent_P.lm.summary <- summary(GMCBF_Vent_P.lm)\nGMCBF_Vent_P.lm.summary = CBF_Vent_P.lm.summary\nCBF_Vent_P.predict <- ggpredict(GMCBF_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent_P.lm.summary$coefficients[4,4],2)))\nGMCBF_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.4, y=21, label=paste(\"Adj R Sq = \", round(CBF_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"GM CBF\\n (ml/100g/min)\", x = \"\")+ylim(4,22)+\ntheme_minimalism()\n\nWMCBF_Vent_P.lm <- lm(WM_CBF ~ PMA + GA + Vent_P, data=alldata)\nCBF_Vent_P.lm.summary <- summary(WMCBF_Vent_P.lm)\nWMCBF_Vent_P.lm.summary = CBF_Vent_P.lm.summary\nCBF_Vent_P.predict <- ggpredict(WMCBF_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent_P.lm.summary$coefficients[4,4],2)))\nWMCBF_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.4, y=15, label=paste(\"Adj R Sq = \", round(CBF_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"WM CBF\\n (ml/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nDeepGMCBF_Vent_P.lm <- lm(Deep_GM_CBF ~ PMA + GA + Vent_P, data=alldata)\nCBF_Vent_P.lm.summary <- summary(DeepGMCBF_Vent_P.lm)\nDeepGMCBF_Vent_P.lm.summary = CBF_Vent_P.lm.summary\nCBF_Vent_P.predict <- ggpredict(DeepGMCBF_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent_P.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.4, y=30, label=paste(\"Adj R Sq = \", round(CBF_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Deep GM CBF\\n (ml/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCerebellumCBF_Vent_P.lm <- lm(Cerebellum_CBF ~ PMA + GA + Vent_P, data=alldata)\nCBF_Vent_P.lm.summary <- summary(CerebellumCBF_Vent_P.lm)\nCerebellumCBF_Vent_P.lm.summary = CBF_Vent_P.lm.summary\nCBF_Vent_P.predict <- ggpredict(CerebellumCBF_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent_P.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.4, y=35, label=paste(\"Adj R Sq = \", round(CBF_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Cerebellum CBF\\n (ml/100g/min)\", x = \"\")+ylim(3,36)+\ntheme_minimalism()\n\nBrainstemCBF_Vent_P.lm <- lm(Brain_Stem_CBF ~ PMA + GA + Vent_P, data=alldata)\nCBF_Vent_P.lm.summary <- summary(BrainstemCBF_Vent_P.lm)\nBrainstemCBF_Vent_P.lm.summary = CBF_Vent_P.lm.summary\nCBF_Vent_P.predict <- ggpredict(BrainstemCBF_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent_P.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.4, y=42, label=paste(\"Adj R Sq = \", round(CBF_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CBF\\n (ml/100g/min)\", x = \"Proportion of Time on All Categories\")+\ntheme_minimalism()\n\nHipandamygCBF_Vent_P.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + Vent_P, data=alldata)\nCBF_Vent_P.lm.summary <- summary(HipandamygCBF_Vent_P.lm)\nHipandamygCBF_Vent_P.lm.summary = CBF_Vent_P.lm.summary\nCBF_Vent_P.predict <- ggpredict(HipandamygCBF_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_Vent_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.4, y=30, label=paste(\"Adj R Sq = \", round(CBF_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Hip and Amyg CBF \\n (ml/100g/min)\", x = \"\")+\ntheme_minimalism()\n\n(CBF_v_VentPerc_patch <- GMCBF_VentP_plot + WMCBF_VentP_plot + DeepGMCBF_VentP_plot + CerebellumCBF_VentP_plot + BrainstemCBF_VentP_plot + HipandAmygCBF_VentP_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Percent of Days on Invasive Ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCBF_IN_P.lm <- lm(GM_CBF ~ PMA + GA + IN_P , data=alldata)\nCBF_IN_P.lm.summary <- summary(CBF_IN_P.lm)\nCBF_IN_P.predict <- ggpredict(CBF_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_IN_P.lm.summary$coefficients[4,4],2)))\nGMCBF_InvPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CBF (ml/100g/min)\", x = \"\")+ ylim(5,25) +\n  annotate(geom=\"text\", x=0.1, y=23, label=paste(\"Adj R Sq = \", round(CBF_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_IN_P.lm <- lm(WM_CBF ~ PMA + GA + IN_P , data=alldata)\nCBF_IN_P.lm.summary <- summary(CBF_IN_P.lm)\nCBF_IN_P.predict <- ggpredict(CBF_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_IN_P.lm.summary$coefficients[4,4],2)))\nWMCBF_InvPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=0.1, y=16, label=paste(\"Adj R Sq = \", round(CBF_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_IN_P.lm <- lm(Deep_GM_CBF ~ PMA + GA + IN_P , data=alldata)\nCBF_IN_P.lm.summary <- summary(CBF_IN_P.lm)\nCBF_IN_P.predict <- ggpredict(CBF_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_IN_P.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_InvPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CBF (ml/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=0.1, y=30, label=paste(\"Adj R Sq = \", round(CBF_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_IN_P.lm <- lm(Cerebellum_CBF ~ PMA + GA + IN_P , data=alldata)\nCBF_IN_P.lm.summary <- summary(CBF_IN_P.lm)\nCBF_IN_P.predict <- ggpredict(CBF_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_IN_P.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_InvPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CBF (ml/100g/min)\", x = \"\")+ ylim(7,42)+\n  annotate(geom=\"text\", x=0.1, y=40, label=paste(\"Adj R Sq = \", round(CBF_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_IN_P.lm <- lm(Brain_Stem_CBF ~ PMA + GA + IN_P , data=alldata)\nCBF_IN_P.lm.summary <- summary(CBF_IN_P.lm)\nCBF_IN_P.predict <- ggpredict(CBF_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_IN_P.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_InvPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Brain_Stem_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CBF (ml/100g/min)\", x = \"Percentage of Time on Category 1n\")+ ylim(7,52)+\n  annotate(geom=\"text\", x=0.1, y=50, label=paste(\"Adj R Sq = \", round(CBF_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_IN_P.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + IN_P , data=alldata)\nCBF_IN_P.lm.summary <- summary(CBF_IN_P.lm)\nCBF_IN_P.predict <- ggpredict(CBF_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_IN_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_InvPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CBF (ml/100g/min)\", x = \"\")+ ylim(7,37) +\n  annotate(geom=\"text\", x=0.1, y=35, label=paste(\"Adj R Sq = \", round(CBF_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CBF_v_InvPerc_patch <- GMCBF_InvPerc_plot + WMCBF_InvPerc_plot + DeepGMCBF_InvPerc_plot + CerebellumCBF_InvPerc_plot + BrainstemCBF_InvPerc_plot + HipandAmygCBF_InvPerc_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Percent of Days on Noninvasive Ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCBF_NI_P.lm <- lm(GM_CBF ~ PMA + GA + NI_P , data=alldata)\nCBF_NI_P.lm.summary <- summary(CBF_NI_P.lm)\nCBF_NI_P.predict <- ggpredict(CBF_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_NI_P.lm.summary$coefficients[4,4],2)))\nGMCBF_NIPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CBF (ml/100g/min)\", x = \"n\")+ylim(4,26)+\n  annotate(geom=\"text\", x=0.2, y=25, label=paste(\"Adj R Sq = \", round(CBF_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_NI_P.lm <- lm(WM_CBF ~ PMA + GA + NI_P , data=alldata)\nCBF_NI_P.lm.summary <- summary(CBF_NI_P.lm)\nCBF_NI_P.predict <- ggpredict(CBF_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_NI_P.lm.summary$coefficients[4,4],2)))\nWMCBF_NIPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CBF (ml/100g/min)\", x = \"\")+ylim(4,21)+\n  annotate(geom=\"text\", x=0.2, y=20, label=paste(\"Adj R Sq = \", round(CBF_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_NI_P.lm <- lm(Deep_GM_CBF ~ PMA + GA + NI_P , data=alldata)\nCBF_NI_P.lm.summary <- summary(CBF_NI_P.lm)\nCBF_NI_P.predict <- ggpredict(CBF_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_NI_P.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_NIPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CBF (ml/100g/min)\", x = \"\")+ylim(5,36)+\n  annotate(geom=\"text\", x=0.2, y=35, label=paste(\"Adj R Sq = \", round(CBF_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_NI_P.lm <- lm(Cerebellum_CBF ~ PMA + GA + NI_P , data=alldata)\nCBF_NI_P.lm.summary <- summary(CBF_NI_P.lm)\nCBF_NI_P.predict <- ggpredict(CBF_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_NI_P.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_NIPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CBF (ml/100g/min)\", x = \"\")+ylim(7,41)+\n  annotate(geom=\"text\", x=0.2, y=40, label=paste(\"Adj R Sq = \", round(CBF_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_NI_P.lm <- lm(Brain_Stem_CBF ~ PMA + GA + NI_P , data=alldata)\nCBF_NI_P.lm.summary <- summary(CBF_NI_P.lm)\nCBF_NI_P.predict <- ggpredict(CBF_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_NI_P.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_NIPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Brain_Stem_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CBF (ml/100g/min)\", x = \"Percentage of Time on Category 2\")+ylim(7,51)+\n  annotate(geom=\"text\", x=0.2, y=50, label=paste(\"Adj R Sq = \", round(CBF_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_NI_P.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + NI_P , data=alldata)\nCBF_NI_P.lm.summary <- summary(CBF_NI_P.lm)\nCBF_NI_P.predict <- ggpredict(CBF_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_NI_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_NIPerc_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CBF (ml/100g/min)\", x = \"\")+ylim(7,36)+\n  annotate(geom=\"text\", x=0.2, y=35, label=paste(\"Adj R Sq = \", round(CBF_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CBF_v_NonInvPerc_patch <- GMCBF_NIPerc_plot + WMCBF_NIPerc_plot + DeepGMCBF_NIPerc_plot + CerebellumCBF_NIPerc_plot + BrainstemCBF_NIPerc_plot + HipandAmygCBF_NIPerc_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CBF ~ Percent of Days on Less Invasive Ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCBF_LI_P.lm <- lm(GM_CBF ~ PMA + GA + LI_P , data=alldata)\nCBF_LI_P.lm.summary <- summary(CBF_LI_P.lm)\nCBF_LI_P.predict <- ggpredict(CBF_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_LI_P.lm.summary$coefficients[4,4],2)))\nGMCBF_LIP_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CBF (ml/100g/min)\", x = \"\")+ylim(5,26)+\n  annotate(geom=\"text\", x=0.4, y=25, label=paste(\"Adj R Sq = \", round(CBF_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_LI_P.lm <- lm(WM_CBF ~ PMA + GA + LI_P , data=alldata)\nCBF_LI_P.lm.summary <- summary(CBF_LI_P.lm)\nCBF_LI_P.predict <- ggpredict(CBF_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_LI_P.lm.summary$coefficients[4,4],2)))\nWMCBF_LIP_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = WM_CBF))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = WM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CBF (ml/100g/min)\", x = \"\")+ylim(5,21)+\n  annotate(geom=\"text\", x=0.4, y=20, label=paste(\"Adj R Sq = \", round(CBF_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_LI_P.lm <- lm(Deep_GM_CBF ~ PMA + GA + LI_P , data=alldata)\nCBF_LI_P.lm.summary <- summary(CBF_LI_P.lm)\nCBF_LI_P.predict <- ggpredict(CBF_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_LI_P.lm.summary$coefficients[4,4],2)))\nDeepGMCBF_LIP_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Deep_GM_CBF))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Deep_GM_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CBF (ml/100g/min)\", x = \"\")+ylim(7,33)+\n  annotate(geom=\"text\", x=0.4, y=32, label=paste(\"Adj R Sq = \", round(CBF_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_LI_P.lm <- lm(Cerebellum_CBF ~ PMA + GA + LI_P , data=alldata)\nCBF_LI_P.lm.summary <- summary(CBF_LI_P.lm)\nCBF_LI_P.predict <- ggpredict(CBF_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_LI_P.lm.summary$coefficients[4,4],2)))\nCerebellumCBF_LIP_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Cerebellum_CBF))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Cerebellum_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CBF (ml/100g/min)\", x = \"\")+ylim(7,41)+\n  annotate(geom=\"text\", x=0.4, y=40, label=paste(\"Adj R Sq = \", round(CBF_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_LI_P.lm <- lm(Brain_Stem_CBF ~ PMA + GA + LI_P , data=alldata)\nCBF_LI_P.lm.summary <- summary(CBF_LI_P.lm)\nCBF_LI_P.predict <- ggpredict(CBF_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_LI_P.lm.summary$coefficients[4,4],2)))\nBrainstemCBF_LIP_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Brain_Stem_CBF))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Brain_Stem_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CBF (ml/100g/min)\", x = \"Percentage of Time on Category 3\")+ylim(8,51)+\n  annotate(geom=\"text\", x=0.4, y=50, label=paste(\"Adj R Sq = \", round(CBF_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCBF_LI_P.lm <- lm(Hip_and_Amyg_CBF ~ PMA + GA + LI_P , data=alldata)\nCBF_LI_P.lm.summary <- summary(CBF_LI_P.lm)\nCBF_LI_P.predict <- ggpredict(CBF_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CBF_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CBF_LI_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCBF_LIP_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Hip_and_Amyg_CBF))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Hip_and_Amyg_CBF), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CBF_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CBF_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CBF (ml/100g/min)\", x = \"\")+ylim(7,36)+\n  annotate(geom=\"text\", x=0.4, y=35, label=paste(\"Adj R Sq = \", round(CBF_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CBF_v_LessInvPerc_patch <- GMCBF_LIP_plot + WMCBF_LIP_plot + DeepGMCBF_LIP_plot + CerebellumCBF_LIP_plot + BrainstemCBF_LIP_plot + HipandAmygCBF_LIP_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range (`stat_smooth()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range (`stat_smooth()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Invasive\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCMRO2_Invasive.lm <- lm(GM_CMRO2 ~ PMA + GA + Invasive, data=alldata)\nCMRO2_Invasive.lm.summary <- summary(GMCMRO2_Invasive.lm)\nGMCMRO2_Invasive.lm.summary = CMRO2_Invasive.lm.summary\nCMRO2_Invasive.predict <- ggpredict(GMCMRO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Invasive.lm.summary$coefficients[4,4],2)))\nGMCMRO2_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=49, label=paste(\"Adj R Sq = \", round(CMRO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nWMCMRO2_Invasive.lm <- lm(WM_CMRO2 ~ PMA + GA + Invasive, data=alldata)\nCMRO2_Invasive.lm.summary <- summary(WMCMRO2_Invasive.lm)\nWMCMRO2_Invasive.lm.summary = CMRO2_Invasive.lm.summary\nCMRO2_Invasive.predict <- ggpredict(WMCMRO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Invasive.lm.summary$coefficients[4,4],2)))\nWMCMRO2_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=38, label=paste(\"Adj R Sq = \", round(CMRO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nDeepGMCMRO2_Invasive.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + Invasive, data=alldata)\nCMRO2_Invasive.lm.summary <- summary(DeepGMCMRO2_Invasive.lm)\nDeepGMCMRO2_Invasive.lm.summary = CMRO2_Invasive.lm.summary\nCMRO2_Invasive.predict <- ggpredict(DeepGMCMRO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Invasive.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(3,76)+\n  annotate(geom=\"text\", x=5, y=75, label=paste(\"Adj R Sq = \", round(CMRO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCerebellumCMRO2_Invasive.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + Invasive, data=alldata)\nCMRO2_Invasive.lm.summary <- summary(CerebellumCMRO2_Invasive.lm)\nCerebellumCMRO2_Invasive.lm.summary = CMRO2_Invasive.lm.summary\nCMRO2_Invasive.predict <- ggpredict(CerebellumCMRO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Invasive.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=80, label=paste(\"Adj R Sq = \", round(CMRO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nBrainstemCMRO2_Invasive.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + Invasive, data=alldata)\nCMRO2_Invasive.lm.summary <- summary(BrainstemCMRO2_Invasive.lm)\nBrainstemCMRO2_Invasive.lm.summary = CMRO2_Invasive.lm.summary\nCMRO2_Invasive.predict <- ggpredict(BrainstemCMRO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Invasive.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"Category 1 (Days)\")+\n  annotate(geom=\"text\", x=5, y=100, label=paste(\"Adj R Sq = \", round(CMRO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nHipandamygCMRO2_Invasive.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + Invasive, data=alldata)\nCMRO2_Invasive.lm.summary <- summary(HipandamygCMRO2_Invasive.lm)\nHipandamygCMRO2_Invasive.lm.summary = CMRO2_Invasive.lm.summary\nCMRO2_Invasive.predict <- ggpredict(HipandamygCMRO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Invasive.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_Invasive_plot <- ggplot() + geom_point(data = alldata, aes(x = Invasive, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(10,78)+\n  annotate(geom=\"text\", x=5, y=77, label=paste(\"Adj R Sq = \", round(CMRO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CMRO2_v_Invasive_patch <- GMCMRO2_Invasive_plot + WMCMRO2_Invasive_plot + DeepGMCMRO2_Invasive_plot + CerebellumCMRO2_Invasive_plot + BrainstemCMRO2_Invasive_plot + HipandAmygCMRO2_Invasive_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Noninvasive\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCMRO2_Noninvasive.lm <- lm(GM_CMRO2 ~ PMA + GA + Noninvasive, data=alldata)\nCMRO2_Noninvasive.lm.summary <- summary(GMCMRO2_Noninvasive.lm)\nGMCMRO2_Noninvasive.lm.summary = CMRO2_Noninvasive.lm.summary\nCMRO2_Noninvasive.predict <- ggpredict(GMCMRO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nGMCMRO2_Noninv_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,54)+\n  annotate(geom=\"text\", x=15, y=50, label=paste(\"Adj R Sq = \", round(CMRO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nWMCMRO2_Noninvasive.lm <- lm(WM_CMRO2 ~ PMA + GA + Noninvasive, data=alldata)\nCMRO2_Noninvasive.lm.summary <- summary(WMCMRO2_Noninvasive.lm)\nWMCMRO2_Noninvasive.lm.summary = CMRO2_Noninvasive.lm.summary\nCMRO2_Noninvasive.predict <- ggpredict(WMCMRO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nWMCMRO2_Noninv_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,41)+\n  annotate(geom=\"text\", x=15, y=40, label=paste(\"Adj R Sq = \", round(CMRO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nDeepGMCMRO2_Noninvasive.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + Noninvasive, data=alldata)\nCMRO2_Noninvasive.lm.summary <- summary(DeepGMCMRO2_Noninvasive.lm)\nDeepGMCMRO2_Noninvasive.lm.summary = CMRO2_Noninvasive.lm.summary\nCMRO2_Noninvasive.predict <- ggpredict(DeepGMCMRO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_Noninv_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(15,76)+\n  annotate(geom=\"text\", x=15, y=75, label=paste(\"Adj R Sq = \", round(CMRO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCerebellumCMRO2_Noninvasive.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + Noninvasive, data=alldata)\nCMRO2_Noninvasive.lm.summary <- summary(CerebellumCMRO2_Noninvasive.lm)\nCerebellumCMRO2_Noninvasive.lm.summary = CMRO2_Noninvasive.lm.summary\nCMRO2_Noninvasive.predict <- ggpredict(CerebellumCMRO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_Noninv_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=80, label=paste(\"Adj R Sq = \", round(CMRO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nBrainstemCMRO2_Noninvasive.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + Noninvasive, data=alldata)\nCMRO2_Noninvasive.lm.summary <- summary(BrainstemCMRO2_Noninvasive.lm)\nBrainstemCMRO2_Noninvasive.lm.summary = CMRO2_Noninvasive.lm.summary\nCMRO2_Noninvasive.predict <- ggpredict(BrainstemCMRO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_Noninv_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"Category 2 (Days)\")+\n  annotate(geom=\"text\", x=15, y=100, label=paste(\"Adj R Sq = \", round(CMRO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nHipandamygCMRO2_Noninvasive.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + Noninvasive, data=alldata)\nCMRO2_Noninvasive.lm.summary <- summary(HipandamygCMRO2_Noninvasive.lm)\nHipandamygCMRO2_Noninvasive.lm.summary = CMRO2_Noninvasive.lm.summary\nCMRO2_Noninvasive.predict <- ggpredict(HipandamygCMRO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_Noninv_plot <- ggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=15, y=70, label=paste(\"Adj R Sq = \", round(CMRO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CMRO2_v_NonInvasive_patch <- GMCMRO2_Noninv_plot + WMCMRO2_Noninv_plot + DeepGMCMRO2_Noninv_plot + CerebellumCMRO2_Noninv_plot + BrainstemCMRO2_Noninv_plot + HipandAmygCMRO2_Noninv_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Less Invasive\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCMRO2_Less_Invasive.lm <- lm(GM_CMRO2 ~ PMA + GA + Less_Invasive, data=alldata)\nCMRO2_Less_Invasive.lm.summary <- summary(GMCMRO2_Less_Invasive.lm)\nGMCMRO2_Less_Invasive.lm.summary = CMRO2_Less_Invasive.lm.summary\nCMRO2_Less_Invasive.predict <- ggpredict(GMCMRO2_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4],2)))\nGMCMRO2_LessInv_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=50, label=paste(\"Adj R Sq = \", round(CMRO2_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nWMCMRO2_Less_Invasive.lm <- lm(WM_CMRO2 ~ PMA + GA + Less_Invasive, data=alldata)\nCMRO2_Less_Invasive.lm.summary <- summary(WMCMRO2_Less_Invasive.lm)\nWMCMRO2_Less_Invasive.lm.summary = CMRO2_Less_Invasive.lm.summary\nCMRO2_Less_Invasive.predict <- ggpredict(WMCMRO2_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4],2)))\nWMCMRO2_LessInv_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=50, label=paste(\"Adj R Sq = \", round(CMRO2_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nDeepGMCMRO2_Less_Invasive.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + Less_Invasive, data=alldata)\nCMRO2_Less_Invasive.lm.summary <- summary(DeepGMCMRO2_Less_Invasive.lm)\nDeepGMCMRO2_Less_Invasive.lm.summary = CMRO2_Less_Invasive.lm.summary\nCMRO2_Less_Invasive.predict <- ggpredict(DeepGMCMRO2_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_LessInv_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep_GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=3, y=75, label=paste(\"Adj R Sq = \", round(CMRO2_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCerebellumCMRO2_Less_Invasive.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + Less_Invasive, data=alldata)\nCMRO2_Less_Invasive.lm.summary <- summary(CerebellumCMRO2_Less_Invasive.lm)\nCerebellumCMRO2_Less_Invasive.lm.summary = CMRO2_Less_Invasive.lm.summary\nCMRO2_Less_Invasive.predict <- ggpredict(CerebellumCMRO2_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_LessInv_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=38, label=paste(\"Adj R Sq = \", round(CMRO2_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nBrainstemCMRO2_Less_Invasive.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + Less_Invasive, data=alldata)\nCMRO2_Less_Invasive.lm.summary <- summary(BrainstemCMRO2_Less_Invasive.lm)\nBrainstemCMRO2_Less_Invasive.lm.summary = CMRO2_Less_Invasive.lm.summary\nCMRO2_Less_Invasive.predict <- ggpredict(BrainstemCMRO2_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_LessInv_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"Category 3 (Days)\")+\n  annotate(geom=\"text\", x=3, y=90, label=paste(\"Adj R Sq = \", round(CMRO2_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nHipandamygCMRO2_Less_Invasive.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + Less_Invasive, data=alldata)\nCMRO2_Less_Invasive.lm.summary <- summary(HipandamygCMRO2_Less_Invasive.lm)\nHipandamygCMRO2_Less_Invasive.lm.summary = CMRO2_Less_Invasive.lm.summary\nCMRO2_Less_Invasive.predict <- ggpredict(HipandamygCMRO2_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Less_Invasive.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_LessInv_plot <- ggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=5, y=38, label=paste(\"Adj R Sq = \", round(CMRO2_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CMRO2_v_LessInvasive_patch <- GMCMRO2_LessInv_plot + WMCMRO2_LessInv_plot + DeepGMCMRO2_LessInv_plot + CerebellumCMRO2_LessInv_plot + BrainstemCMRO2_LessInv_plot + HipandAmygCMRO2_LessInv_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Roomair\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCMRO2_roomair.lm <- lm(GM_CMRO2 ~ PMA + GA + roomair, data=alldata)\nCMRO2_roomair.lm.summary <- summary(GMCMRO2_roomair.lm)\nGMCMRO2_roomair.lm.summary = CMRO2_roomair.lm.summary\nCMRO2_roomair.predict <- ggpredict(GMCMRO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_roomair.lm.summary$coefficients[4,4],2)))\nGMCMRO2_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=37, y=38, label=paste(\"Adj R Sq = \", round(CMRO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nWMCMRO2_roomair.lm <- lm(WM_CMRO2 ~ PMA + GA + roomair, data=alldata)\nCMRO2_roomair.lm.summary <- summary(WMCMRO2_roomair.lm)\nWMCMRO2_roomair.lm.summary = CMRO2_roomair.lm.summary\nCMRO2_roomair.predict <- ggpredict(WMCMRO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_roomair.lm.summary$coefficients[4,4],2)))\nWMCMRO2_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=37, y=30, label=paste(\"Adj R Sq = \", round(CMRO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nDeepGMCMRO2_roomair.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + roomair, data=alldata)\nCMRO2_roomair.lm.summary <- summary(DeepGMCMRO2_roomair.lm)\nDeepGMCMRO2_roomair.lm.summary = CMRO2_roomair.lm.summary\nCMRO2_roomair.predict <- ggpredict(DeepGMCMRO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_roomair.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=37, y=60, label=paste(\"Adj R Sq = \", round(CMRO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Deep GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCerebellumCMRO2_roomair.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + roomair, data=alldata)\nCMRO2_roomair.lm.summary <- summary(CerebellumCMRO2_roomair.lm)\nCerebellumCMRO2_roomair.lm.summary = CMRO2_roomair.lm.summary\nCMRO2_roomair.predict <- ggpredict(CerebellumCMRO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_roomair.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=37, y=62, label=paste(\"Adj R Sq = \", round(CMRO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nBrainstemCMRO2_roomair.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + roomair, data=alldata)\nCMRO2_roomair.lm.summary <- summary(BrainstemCMRO2_roomair.lm)\nBrainstemCMRO2_roomair.lm.summary = CMRO2_roomair.lm.summary\nCMRO2_roomair.predict <- ggpredict(BrainstemCMRO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_roomair.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=37, y=80, label=paste(\"Adj R Sq = \", round(CMRO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"Room Air (Days)\")+\ntheme_minimalism()\n\nHipandamygCMRO2_roomair.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + roomair, data=alldata)\nCMRO2_roomair.lm.summary <- summary(HipandamygCMRO2_roomair.lm)\nHipandamygCMRO2_roomair.lm.summary = CMRO2_roomair.lm.summary\nCMRO2_roomair.predict <- ggpredict(HipandamygCMRO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_roomair.lm.summary$coefficients[4,4], 4) < 0.05, \"p < 0.05\", paste(\"p = \", round(CMRO2_roomair.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_roomair_plot <- ggplot() + geom_point(data = alldata, aes(x = roomair, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=37, y=60, label=paste(\"Adj R Sq = \", round(CMRO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\n(CMRO2_v_roomair_patch <- GMCMRO2_roomair_plot + WMCMRO2_roomair_plot + DeepGMCMRO2_roomair_plot + CerebellumCMRO2_roomair_plot + BrainstemCMRO2_roomair_plot + HipandAmygCMRO2_roomair_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Total Vent\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCMRO2_Vent.lm <- lm(GM_CMRO2 ~ PMA + GA + Total_vent, data=alldata)\nCMRO2_Vent.lm.summary <- summary(CMRO2_Vent.lm)\nCMRO2_Vent.predict <- ggpredict(CMRO2_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent.lm.summary$coefficients[4,4],2)))\nGMCMRO2_AllVent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=50, label=paste(\"Adj R Sq = \", round(CMRO2_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCMRO2_Vent.lm <- lm(WM_CMRO2 ~ PMA + GA + Total_vent, data=alldata)\nCMRO2_Vent.lm.summary <- summary(CMRO2_Vent.lm)\nCMRO2_Vent.predict <- ggpredict(CMRO2_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent.lm.summary$coefficients[4,4],2)))\nWMCMRO2_AllVent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=38, label=paste(\"Adj R Sq = \", round(CMRO2_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCMRO2_Vent.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + Total_vent, data=alldata)\nCMRO2_Vent.lm.summary <- summary(CMRO2_Vent.lm)\nCMRO2_Vent.predict <- ggpredict(CMRO2_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_AllVent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=71, label=paste(\"Adj R Sq = \", round(CMRO2_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Deep GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(14,72)+\ntheme_minimalism()\n\nCMRO2_Vent.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + Total_vent, data=alldata)\nCMRO2_Vent.lm.summary <- summary(CMRO2_Vent.lm)\nCMRO2_Vent.predict <- ggpredict(CMRO2_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_AllVent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=80, label=paste(\"Adj R Sq = \", round(CMRO2_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCMRO2_Vent.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + Total_vent, data=alldata)\nCMRO2_Vent.lm.summary <- summary(CMRO2_Vent.lm)\nCMRO2_Vent.predict <- ggpredict(CMRO2_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_AllVent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=110, label=paste(\"Adj R Sq = \", round(CMRO2_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"Sum of All Categories (Days)\")+\ntheme_minimalism()\n\nCMRO2_Vent.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + Total_vent, data=alldata)\nCMRO2_Vent.lm.summary <- summary(CMRO2_Vent.lm)\nCMRO2_Vent.predict <- ggpredict(CMRO2_Vent.lm, terms=c(\"Total_vent\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_AllVent_plot <- ggplot() + geom_point(data = alldata, aes(x = Total_vent, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Total_vent, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=25, y=76, label=paste(\"Adj R Sq = \", round(CMRO2_Vent.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\n(CMRO2_v_AllVent_patch <- GMCMRO2_AllVent_plot + WMCMRO2_AllVent_plot + DeepGMCMRO2_AllVent_plot + CerebellumCMRO2_AllVent_plot + BrainstemCMRO2_AllVent_plot + HipandAmygCMRO2_AllVent_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Porportion of days on ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nGMCMRO2_Vent_P.lm <- lm(GM_CMRO2 ~ PMA + GA + Vent_P, data=alldata)\nCMRO2_Vent_P.lm.summary <- summary(GMCMRO2_Vent_P.lm)\nGMCMRO2_Vent_P.lm.summary = CMRO2_Vent_P.lm.summary\nCMRO2_Vent_P.predict <- ggpredict(GMCMRO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent_P.lm.summary$coefficients[4,4],2)))\nGMCMRO2_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.35, y=44, label=paste(\"Adj R Sq = \", round(CMRO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(9,46)+\ntheme_minimalism()\n\nWMCMRO2_Vent_P.lm <- lm(WM_CMRO2 ~ PMA + GA + Vent_P, data=alldata)\nCMRO2_Vent_P.lm.summary <- summary(WMCMRO2_Vent_P.lm)\nWMCMRO2_Vent_P.lm.summary = CMRO2_Vent_P.lm.summary\nCMRO2_Vent_P.predict <- ggpredict(WMCMRO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent_P.lm.summary$coefficients[4,4],2)))\nWMCMRO2_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.35, y=31, label=paste(\"Adj R Sq = \", round(CMRO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nDeepGMCMRO2_Vent_P.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + Vent_P, data=alldata)\nCMRO2_Vent_P.lm.summary <- summary(DeepGMCMRO2_Vent_P.lm)\nDeepGMCMRO2_Vent_P.lm.summary = CMRO2_Vent_P.lm.summary\nCMRO2_Vent_P.predict <- ggpredict(DeepGMCMRO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent_P.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.35, y=60, label=paste(\"Adj R Sq = \", round(CMRO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nCerebellumCMRO2_Vent_P.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + Vent_P, data=alldata)\nCMRO2_Vent_P.lm.summary <- summary(CerebellumCMRO2_Vent_P.lm)\nCerebellumCMRO2_Vent_P.lm.summary = CMRO2_Vent_P.lm.summary\nCMRO2_Vent_P.predict <- ggpredict(CerebellumCMRO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent_P.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.35, y=65, label=paste(\"Adj R Sq = \", round(CMRO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\nBrainstemCMRO2_Vent_P.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + Vent_P, data=alldata)\nCMRO2_Vent_P.lm.summary <- summary(BrainstemCMRO2_Vent_P.lm)\nBrainstemCMRO2_Vent_P.lm.summary = CMRO2_Vent_P.lm.summary\nCMRO2_Vent_P.predict <- ggpredict(BrainstemCMRO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent_P.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.35, y=82, label=paste(\"Adj R Sq = \", round(CMRO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"Proportion of Time on All Categories\")+\ntheme_minimalism()\n\nHipandamygCMRO2_Vent_P.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + Vent_P, data=alldata)\nCMRO2_Vent_P.lm.summary <- summary(HipandamygCMRO2_Vent_P.lm)\nHipandamygCMRO2_Vent_P.lm.summary = CMRO2_Vent_P.lm.summary\nCMRO2_Vent_P.predict <- ggpredict(HipandamygCMRO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_Vent_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_VentP_plot <- ggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.35, y=60, label=paste(\"Adj R Sq = \", round(CMRO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"\")+\ntheme_minimalism()\n\n(CMRO2_v_PropVent_patch <- GMCMRO2_VentP_plot + WMCMRO2_VentP_plot + DeepGMCMRO2_VentP_plot + CerebellumCMRO2_VentP_plot + BrainstemCMRO2_VentP_plot + HipandAmygCMRO2_VentP_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Percent of days on invasive ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCMRO2_IN_P.lm <- lm(GM_CMRO2 ~ PMA + GA + IN_P , data=alldata)\nCMRO2_IN_P.lm.summary <- summary(CMRO2_IN_P.lm)\nCMRO2_IN_P.predict <- ggpredict(CMRO2_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_IN_P.lm.summary$coefficients[4,4],2)))\nGMCMRO2_PercentInv_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,51)+\n  annotate(geom=\"text\", x=0.1, y=50, label=paste(\"Adj R Sq = \", round(CMRO2_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_IN_P.lm <- lm(WM_CMRO2 ~ PMA + GA + IN_P , data=alldata)\nCMRO2_IN_P.lm.summary <- summary(CMRO2_IN_P.lm)\nCMRO2_IN_P.predict <- ggpredict(CMRO2_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_IN_P.lm.summary$coefficients[4,4],2)))\nWMCMRO2_PercentInv_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,41)+\n  annotate(geom=\"text\", x=0.1, y=40, label=paste(\"Adj R Sq = \", round(CMRO2_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_IN_P.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + IN_P , data=alldata)\nCMRO2_IN_P.lm.summary <- summary(CMRO2_IN_P.lm)\nCMRO2_IN_P.predict <- ggpredict(CMRO2_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_IN_P.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_PercentInv_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,71)+\n  annotate(geom=\"text\", x=0.1, y=70, label=paste(\"Adj R Sq = \", round(CMRO2_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_IN_P.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + IN_P , data=alldata)\nCMRO2_IN_P.lm.summary <- summary(CMRO2_IN_P.lm)\nCMRO2_IN_P.predict <- ggpredict(CMRO2_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_IN_P.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_PercentInv_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(15,81)+\n  annotate(geom=\"text\", x=0.1, y=80, label=paste(\"Adj R Sq = \", round(CMRO2_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_IN_P.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + IN_P , data=alldata)\nCMRO2_IN_P.lm.summary <- summary(CMRO2_IN_P.lm)\nCMRO2_IN_P.predict <- ggpredict(CMRO2_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_IN_P.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_PercentInv_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brain Stem CMRO2 \\n (μmol/100g/min)\", x = \"Percentage of Time on Category 1\")+\n  annotate(geom=\"text\", x=0.1, y=99, label=paste(\"Adj R Sq = \", round(CMRO2_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"Brainstem CBF (ml/100g/min)\", x = \"\")+ylim(20,101)+\ntheme_minimalism()\n\nCMRO2_IN_P.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + IN_P , data=alldata)\nCMRO2_IN_P.lm.summary <- summary(CMRO2_IN_P.lm)\nCMRO2_IN_P.predict <- ggpredict(CMRO2_IN_P.lm, terms=c(\"IN_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_IN_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_IN_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_PercentInv_plot <- ggplot() + geom_point(data = alldata, aes(x = IN_P, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = IN_P, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_IN_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_IN_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(15,72)+\n  annotate(geom=\"text\", x=0.1, y=70, label=paste(\"Adj R Sq = \", round(CMRO2_IN_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CMRO2_v_PropInv_patch <- GMCMRO2_PercentInv_plot + WMCMRO2_PercentInv_plot + DeepGMCMRO2_PercentInv_plot + CerebellumCMRO2_PercentInv_plot + BrainstemCMRO2_PercentInv_plot + HipandAmygCMRO2_PercentInv_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range (`stat_smooth()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range (`stat_smooth()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Percent of Days on Noninvasive Ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCMRO2_NI_P.lm <- lm(GM_CMRO2 ~ PMA + GA + NI_P , data=alldata)\nCMRO2_NI_P.lm.summary <- summary(CMRO2_NI_P.lm)\nCMRO2_NI_P.predict <- ggpredict(CMRO2_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_NI_P.lm.summary$coefficients[4,4],2)))\nGMCMRO2_PercentNonInv_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,51)+\n  annotate(geom=\"text\", x=0.12, y=50, label=paste(\"Adj R Sq = \", round(CMRO2_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_NI_P.lm <- lm(WM_CMRO2 ~ PMA + GA + NI_P , data=alldata)\nCMRO2_NI_P.lm.summary <- summary(CMRO2_NI_P.lm)\nCMRO2_NI_P.predict <- ggpredict(CMRO2_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_NI_P.lm.summary$coefficients[4,4],2)))\nWMCMRO2_PercentNonInv_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,39)+\n  annotate(geom=\"text\", x=0.12, y=38, label=paste(\"Adj R Sq = \", round(CMRO2_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_NI_P.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + NI_P , data=alldata)\nCMRO2_NI_P.lm.summary <- summary(CMRO2_NI_P.lm)\nCMRO2_NI_P.predict <- ggpredict(CMRO2_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_NI_P.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_PercentNonInv_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(10,73)+\n  annotate(geom=\"text\", x=0.12, y=72, label=paste(\"Adj R Sq = \", round(CMRO2_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_NI_P.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + NI_P , data=alldata)\nCMRO2_NI_P.lm.summary <- summary(CMRO2_NI_P.lm)\nCMRO2_NI_P.predict <- ggpredict(CMRO2_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_NI_P.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_PercentNonInv_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(15,82)+\n  annotate(geom=\"text\", x=0.12, y=80, label=paste(\"Adj R Sq = \", round(CMRO2_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_NI_P.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + NI_P , data=alldata)\nCMRO2_NI_P.lm.summary <- summary(CMRO2_NI_P.lm)\nCMRO2_NI_P.predict <- ggpredict(CMRO2_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_NI_P.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_PercentNonInv_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brainstem CMRO2 \\n (μmol/100g/min)\", x = \"Percentage of Time on Category 2\")+ylim(10,97)+\n  annotate(geom=\"text\", x=0.12, y=95, label=paste(\"Adj R Sq = \", round(CMRO2_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_NI_P.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + NI_P , data=alldata)\nCMRO2_NI_P.lm.summary <- summary(CMRO2_NI_P.lm)\nCMRO2_NI_P.predict <- ggpredict(CMRO2_NI_P.lm, terms=c(\"NI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_NI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_NI_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_PercentNonInv_plot <- ggplot() + geom_point(data = alldata, aes(x = NI_P, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = NI_P, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_NI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_NI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(10,77)+\n  annotate(geom=\"text\", x=0.12, y=75, label=paste(\"Adj R Sq = \", round(CMRO2_NI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CMRO2_v_PropNonInv_patch <- GMCMRO2_PercentNonInv_plot + WMCMRO2_PercentNonInv_plot + DeepGMCMRO2_PercentNonInv_plot + CerebellumCMRO2_PercentNonInv_plot + BrainstemCMRO2_PercentNonInv_plot + HipandAmygCMRO2_PercentNonInv_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CMRO2 ~ Percent of Days on Less Invasive Ventilation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCMRO2_LI_P.lm <- lm(GM_CMRO2 ~ PMA + GA + LI_P , data=alldata)\nCMRO2_LI_P.lm.summary <- summary(CMRO2_LI_P.lm)\nCMRO2_LI_P.predict <- ggpredict(CMRO2_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_LI_P.lm.summary$coefficients[4,4],2)))\nGMCMRO2_LessInvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(9,45)+\n  annotate(geom=\"text\", x=0.4, y=43, label=paste(\"Adj R Sq = \", round(CMRO2_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_LI_P.lm <- lm(WM_CMRO2 ~ PMA + GA + LI_P , data=alldata)\nCMRO2_LI_P.lm.summary <- summary(CMRO2_LI_P.lm)\nCMRO2_LI_P.predict <- ggpredict(CMRO2_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_LI_P.lm.summary$coefficients[4,4],2)))\nWMCMRO2_LessInvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = WM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = WM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"WM CMRO2 \\n (μmol/100g/min)\", x = \"\")+ylim(8,36)+\n  annotate(geom=\"text\", x=0.4, y=35, label=paste(\"Adj R Sq = \", round(CMRO2_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_LI_P.lm <- lm(Deep_GM_CMRO2 ~ PMA + GA + LI_P , data=alldata)\nCMRO2_LI_P.lm.summary <- summary(CMRO2_LI_P.lm)\nCMRO2_LI_P.predict <- ggpredict(CMRO2_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_LI_P.lm.summary$coefficients[4,4],2)))\nDeepGMCMRO2_LessInvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Deep_GM_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Deep_GM_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Deep GM CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=0.4, y=60, label=paste(\"Adj R Sq = \", round(CMRO2_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_LI_P.lm <- lm(Cerebellum_CMRO2 ~ PMA + GA + LI_P , data=alldata)\nCMRO2_LI_P.lm.summary <- summary(CMRO2_LI_P.lm)\nCMRO2_LI_P.predict <- ggpredict(CMRO2_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_LI_P.lm.summary$coefficients[4,4],2)))\nCerebellumCMRO2_LessInvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Cerebellum_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Cerebellum_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Cerebellum CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=0.4, y=68, label=paste(\"Adj R Sq = \", round(CMRO2_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_LI_P.lm <- lm(Brain_Stem_CMRO2 ~ PMA + GA + LI_P , data=alldata)\nCMRO2_LI_P.lm.summary <- summary(CMRO2_LI_P.lm)\nCMRO2_LI_P.predict <- ggpredict(CMRO2_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_LI_P.lm.summary$coefficients[4,4],2)))\nBrainstemCMRO2_LessInvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Brain_Stem_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Brain_Stem_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Brain Stem CMRO2 \\n (μmol/100g/min)\", x = \"Percentage of Days on Category 3\")+\n  annotate(geom=\"text\", x=0.4, y=84, label=paste(\"Adj R Sq = \", round(CMRO2_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\nCMRO2_LI_P.lm <- lm(Hip_and_Amyg_CMRO2 ~ PMA + GA + LI_P , data=alldata)\nCMRO2_LI_P.lm.summary <- summary(CMRO2_LI_P.lm)\nCMRO2_LI_P.predict <- ggpredict(CMRO2_LI_P.lm, terms=c(\"LI_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CMRO2_LI_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CMRO2_LI_P.lm.summary$coefficients[4,4],2)))\nHipandAmygCMRO2_LessInvasive_plot <- ggplot() + geom_point(data = alldata, aes(x = LI_P, y = Hip_and_Amyg_CMRO2))  +\n  geom_smooth(data=alldata, aes(x = LI_P, y = Hip_and_Amyg_CMRO2), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CMRO2_LI_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CMRO2_LI_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hip and Amyg CMRO2 \\n (μmol/100g/min)\", x = \"\")+\n  annotate(geom=\"text\", x=0.4, y=63, label=paste(\"Adj R Sq = \", round(CMRO2_LI_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n\n(CMRO2_v_PropLessInv_patch <- GMCMRO2_LessInvasive_plot + WMCMRO2_LessInvasive_plot + DeepGMCMRO2_LessInvasive_plot + CerebellumCMRO2_LessInvasive_plot + BrainstemCMRO2_LessInvasive_plot + HipandAmygCMRO2_LessInvasive_plot)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Patchwork Plots\n\n## Proportion\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: proportion\n#| fig-width: 15\n#| fig-height: 15\n(CBFandCMRO2_v_ProportionVent <- CBF_v_VentPerc_patch / CMRO2_v_PropVent_patch + plot_annotation(tag_levels = 'A') & theme(plot.tag = element_text(size = 15)))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/proportion-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nggsave('CBFandCMRO2vProportionVent.png', width=15, height=15, units=\"in\", dpi=300)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n:::\n\n\n\n\n\n## Category 2\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: cat2\n#| fig-width: 15\n#| fig-height: 15\n\n(CBFandCMRO2_v_Category2 <- CBF_v_NonInvasive_patch / CMRO2_v_NonInvasive_patch + plot_annotation(tag_levels = 'A') & theme(plot.tag = element_text(size = 15)))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/cat2-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nggsave('CBFandCMRO2vCategory2.png', width=15, height=15, units=\"in\", dpi=300)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n:::\n\n\n\n\n\n## Roomair\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: roomair\n#| fig-width: 15\n#| fig-height: 15\n(CBFandCMRO2_v_Roomair <- CBF_v_Roomair_patch / CMRO2_v_roomair_patch + plot_annotation(tag_levels = 'A') & theme(plot.tag = element_text(size = 15)))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/roomair-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nggsave('CBFandCMRO2vRoomair.png', width=15, height=15, units=\"in\", dpi=300)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n:::\n\n\n\n\n\n# CSVO2\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSvO2_Invasive.lm <- lm(CSvO2_P ~ PMA + GA + Invasive , data=alldata)\nCSvO2_Invasive.lm.summary <- summary(CSvO2_Invasive.lm)\nCSvO2_Invasive.predict <- ggpredict(CSvO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSvO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSvO2_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Invasive, y = CSvO2_P))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = CSvO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSvO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSvO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=5, y=71, label=paste(\"Adj R Sq = \", round(CSvO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"CSvO2 (%)\", x = \"Category 1 (Days)\")+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSvO2_Noninvasive.lm <- lm(CSvO2_P ~ PMA + GA + Noninvasive , data=alldata)\nCSvO2_Noninvasive.lm.summary <- summary(CSvO2_Noninvasive.lm)\nCSvO2_Noninvasive.predict <- ggpredict(CSvO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSvO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSvO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = CSvO2_P))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = CSvO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSvO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSvO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=12, y=72, label=paste(\"Adj R Sq = \", round(CSvO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"CSvO2 (%)\", x = \"Category 2 (Days)\")+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSvO2_Less_Invasive.lm <- lm(CSvO2_P ~ PMA + GA + Less_Invasive , data=alldata)\nCSvO2_Less_Invasive.lm.summary <- summary(CSvO2_Less_Invasive.lm)\nCSvO2_Less_Invasive.predict <- ggpredict(CSvO2_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSvO2_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSvO2_Less_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = CSvO2_P))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = CSvO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSvO2_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSvO2_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=5, y=72, label=paste(\"Adj R Sq = \", round(CSvO2_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"CSvO2 (%)\", x = \"Category 3 (Days)\")+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSvO2_Vent_P.lm <- lm(CSvO2_P ~ PMA + GA + Vent_P , data=alldata)\nCSvO2_Vent_P.lm.summary <- summary(CSvO2_Vent_P.lm)\nCSvO2_Vent_P.predict <- ggpredict(CSvO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSvO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSvO2_Vent_P.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Vent_P, y = CSvO2_P))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = CSvO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSvO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSvO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=0.35, y=75, label=paste(\"Adj R Sq = \", round(CSvO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"CSvO2 (%)\", x = \"Proportion of Time on All Categories\")+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSvO2_roomair.lm <- lm(CSvO2_P ~ PMA + GA + roomair , data=alldata)\nCSvO2_roomair.lm.summary <- summary(CSvO2_roomair.lm)\nCSvO2_roomair.predict <- ggpredict(CSvO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSvO2_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSvO2_roomair.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = roomair, y = CSvO2_P))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = CSvO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSvO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSvO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSvO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=7, y=71, label=paste(\"Adj R Sq = \", round(CSvO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"CSvO2 (%)\", x = \"Room Air (Days)\")+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# CSaO2\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSaO2_Invasive.lm <- lm(CSaO2_P ~ PMA + GA + Invasive , data=alldata)\nCSaO2_Invasive.lm.summary <- summary(CSaO2_Invasive.lm)\nCSaO2_Invasive.predict <- ggpredict(CSaO2_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSaO2_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSaO2_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Invasive, y = CSaO2_P))  + \n  geom_smooth(data=alldata, aes(x = Invasive, y = CSaO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSaO2_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSaO2_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"CSaO2 (%)\", x = \"Category (Days)\")+\n  ylim(92, NA)+\n  annotate(geom=\"text\", x=5, y=102, label=paste(\"Adj R Sq = \", round(CSaO2_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSaO2_Noninvasive.lm <- lm(CSaO2_P ~ PMA + GA + Noninvasive , data=alldata)\nCSaO2_Noninvasive.lm.summary <- summary(CSaO2_Noninvasive.lm)\nCSaO2_Noninvasive.predict <- ggpredict(CSaO2_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSaO2_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSaO2_Noninvasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = CSaO2_P))  + \n  geom_smooth(data=alldata, aes(x = Noninvasive, y = CSaO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSaO2_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSaO2_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"CSaO2 (%)\", x = \"Category 2 (Days)\")+\n  ylim(92, NA)+\n  annotate(geom=\"text\", x=13, y=102, label=paste(\"Adj R Sq = \", round(CSaO2_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSaO2_LI.lm <- lm(CSaO2_P ~ PMA + GA + Less_Invasive , data=alldata)\nCSaO2_LI.lm.summary <- summary(CSaO2_LI.lm)\nCSaO2_LI.predict <- ggpredict(CSaO2_LI.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSaO2_LI.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSaO2_LI.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = CSaO2_P))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = CSaO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSaO2_LI.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSaO2_LI.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_LI.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_LI.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"CSaO2 (%)\", x = \"Category 3 (Days)\")+ ylim(92, NA)+\n  annotate(geom=\"text\", x=5, y=101, label=paste(\"Adj R Sq = \", round(CSaO2_LI.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSaO2_Vent_P.lm <- lm(CSaO2_P ~ PMA + GA + Vent_P , data=alldata)\nCSaO2_Vent_P.lm.summary <- summary(CSaO2_Vent_P.lm)\nCSaO2_Vent_P.predict <- ggpredict(CSaO2_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSaO2_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSaO2_Vent_P.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Vent_P, y = CSaO2_P))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = CSaO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSaO2_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSaO2_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"CSaO2 (%)\", x = \"Proportion of Time on All Categories (Days)\")+ ylim(92, NA)+\n  annotate(geom=\"text\", x=0.4, y=102, label=paste(\"Adj R Sq = \", round(CSaO2_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nCSaO2_roomair.lm <- lm(CSaO2_P ~ PMA + GA + roomair , data=alldata)\nCSaO2_roomair.lm.summary <- summary(CSaO2_roomair.lm)\nCSaO2_roomair.predict <- ggpredict(CSaO2_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(CSaO2_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(CSaO2_roomair.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = roomair, y = CSaO2_P))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = CSaO2_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=CSaO2_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=CSaO2_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=CSaO2_roomair.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=15, y=102, label=paste(\"Adj R Sq = \", round(CSaO2_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\n  labs(y= \"CSaO2 (%)\", x = \"Room Air (Days)\")+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Hct\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nHct_P_Invasive.lm <- lm(Hct_P ~ PMA + GA + Invasive , data=alldata)\nHct_P_Invasive.lm.summary <- summary(Hct_P_Invasive.lm)\nHct_P_Invasive.predict <- ggpredict(Hct_P_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Hct_P_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Hct_P_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Invasive, y = Hct_P))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Hct_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Hct_P_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Hct_P_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hct (%)\", x = \"Category 1 (Days)\")+\n  annotate(geom=\"text\", x=5, y=40, label=paste(\"Adj R Sq = \", round(Hct_P_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nHct_P_Noninvasive.lm <- lm(Hct_P ~ PMA + GA + Noninvasive , data=alldata)\nHct_P_Noninvasive.lm.summary <- summary(Hct_P_Noninvasive.lm)\nHct_P_Noninvasive.predict <- ggpredict(Hct_P_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Hct_P_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Hct_P_Noninvasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = Hct_P))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = Hct_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Hct_P_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Hct_P_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hct (%)\", x = \"Category 2 (Days)\")+\n  annotate(geom=\"text\", x=13, y=40, label=paste(\"Adj R Sq = \", round(Hct_P_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nHct_P_Less_Invasive.lm <- lm(Hct_P ~ PMA + GA + Less_Invasive , data=alldata)\nHct_P_Less_Invasive.lm.summary <- summary(Hct_P_Less_Invasive.lm)\nHct_P_Less_Invasive.predict <- ggpredict(Hct_P_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Hct_P_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Hct_P_Less_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = Hct_P))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = Hct_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Hct_P_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Hct_P_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hct (%)\", x = \"Category 3 (Days)\")+\n  annotate(geom=\"text\", x=5, y=40, label=paste(\"Adj R Sq = \", round(Hct_P_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nHct_P_Vent_P.lm <- lm(Hct_P ~ PMA + GA + Vent_P , data=alldata)\nHct_P_Vent_P.lm.summary <- summary(Hct_P_Vent_P.lm)\nHct_P_Vent_P.predict <- ggpredict(Hct_P_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Hct_P_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Hct_P_Vent_P.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Vent_P, y = Hct_P))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = Hct_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Hct_P_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Hct_P_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hct (%)\", x = \"Proportion of Time on All Categories\")+\n  annotate(geom=\"text\", x=0.4, y=37, label=paste(\"Adj R Sq = \", round(Hct_P_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nHct_P_roomair.lm <- lm(Hct_P ~ PMA + GA + roomair , data=alldata)\nHct_P_roomair.lm.summary <- summary(Hct_P_roomair.lm)\nHct_P_roomair.predict <- ggpredict(Hct_P_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Hct_P_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Hct_P_roomair.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = roomair, y = Hct_P))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = Hct_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Hct_P_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Hct_P_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Hct_P_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"Hct (%)\", x = \"Room Air (Days)\")+\n  annotate(geom=\"text\", x=7, y=40, label=paste(\"Adj R Sq = \", round(Hct_P_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# OEF\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nOEF_P_Invasive.lm <- lm(OEF_P ~ PMA + GA + Invasive , data=alldata)\nOEF_P_Invasive.lm.summary <- summary(OEF_P_Invasive.lm)\nOEF_P_Invasive.predict <- ggpredict(OEF_P_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(OEF_P_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(OEF_P_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Invasive, y = OEF_P))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = OEF_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=OEF_P_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=OEF_P_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"OEF (%)\", x = \"Category 1 (Days)\")+\n  annotate(geom=\"text\", x=5, y=45, label=paste(\"Adj R Sq = \", round(OEF_P_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nOEF_P_Noninvasive.lm <- lm(OEF_P ~ PMA + GA + Noninvasive , data=alldata)\nOEF_P_Noninvasive.lm.summary <- summary(OEF_P_Noninvasive.lm)\nOEF_P_Noninvasive.predict <- ggpredict(OEF_P_Noninvasive.lm, terms=c(\"Noninvasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(OEF_P_Noninvasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(OEF_P_Noninvasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Noninvasive, y = OEF_P))  +\n  geom_smooth(data=alldata, aes(x = Noninvasive, y = OEF_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=OEF_P_Noninvasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=OEF_P_Noninvasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Noninvasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Noninvasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"OEF (%)\", x = \"Category 2 (Days)\")+\n  annotate(geom=\"text\", x=14, y=45, label=paste(\"Adj R Sq = \", round(OEF_P_Noninvasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nOEF_P_Less_Invasive.lm <- lm(OEF_P ~ PMA + GA + Less_Invasive , data=alldata)\nOEF_P_Less_Invasive.lm.summary <- summary(OEF_P_Less_Invasive.lm)\nOEF_P_Less_Invasive.predict <- ggpredict(OEF_P_Less_Invasive.lm, terms=c(\"Less_Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(OEF_P_Less_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(OEF_P_Less_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Less_Invasive, y = OEF_P))  +\n  geom_smooth(data=alldata, aes(x = Less_Invasive, y = OEF_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=OEF_P_Less_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=OEF_P_Less_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Less_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Less_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"OEF (%)\", x = \"Category 3 (Days)\")+\n  annotate(geom=\"text\", x=5, y=43, label=paste(\"Adj R Sq = \", round(OEF_P_Less_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nOEF_P_Vent_P.lm <- lm(OEF_P ~ PMA + GA + Vent_P , data=alldata)\nOEF_P_Vent_P.lm.summary <- summary(OEF_P_Vent_P.lm)\nOEF_P_Vent_P.predict <- ggpredict(OEF_P_Vent_P.lm, terms=c(\"Vent_P\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(OEF_P_Vent_P.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(OEF_P_Vent_P.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Vent_P, y = OEF_P))  +\n  geom_smooth(data=alldata, aes(x = Vent_P, y = OEF_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=OEF_P_Vent_P.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=OEF_P_Vent_P.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Vent_P.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_Vent_P.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"OEF (%)\", x = \"Proportion of Time on All Categories\")+\n  annotate(geom=\"text\", x=0.35, y=45, label=paste(\"Adj R Sq = \", round(OEF_P_Vent_P.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nOEF_P_roomair.lm <- lm(OEF_P ~ PMA + GA + roomair , data=alldata)\nOEF_P_roomair.lm.summary <- summary(OEF_P_roomair.lm)\nOEF_P_roomair.predict <- ggpredict(OEF_P_roomair.lm, terms=c(\"roomair\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(OEF_P_roomair.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(OEF_P_roomair.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = roomair, y = OEF_P))  +\n  geom_smooth(data=alldata, aes(x = roomair, y = OEF_P), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=OEF_P_roomair.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=OEF_P_roomair.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_roomair.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=OEF_P_roomair.predict, aes(x,predicted), color=\"blue\")+\n  labs(y= \"OEF (%)\", x = \"Room Air (Days)\")+\n  annotate(geom=\"text\", x=7, y=45, label=paste(\"Adj R Sq = \", round(OEF_P_roomair.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Volume ~ Invasive\n\n## Brain Stem\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nVolume_Invasive.lm <- lm(Brain_Stem_Volume ~ PMA + GA + Invasive , data=alldata)\nVolume_Invasive.lm.summary <- summary(Volume_Invasive.lm)\nVolume_Invasive.predict <- ggpredict(Volume_Invasive.lm, terms=c(\"Invasive\"), ci.lvl=0.95)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Argument `ci.lvl` is deprecated and will be removed in the future.\n  Please use `ci_level` instead.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\npvalue <- ifelse(round(Volume_Invasive.lm.summary$coefficients[4,4], 4) < 0.01, \"p < 0.01\", paste(\"p = \", round(Volume_Invasive.lm.summary$coefficients[4,4],2)))\nggplot() + geom_point(data = alldata, aes(x = Invasive, y = Brain_Stem_Volume))  +\n  geom_smooth(data=alldata, aes(x = Invasive, y = Brain_Stem_Volume), method=\"lm\", colour=\"grey\", size=0.5, alpha=0.3) +\n  geom_ribbon(data=Volume_Invasive.predict, aes(x=x, ymin=conf.low, ymax=conf.high), color=\"blue\", alpha=0.15) +\n  geom_line(data=Volume_Invasive.predict, aes(x=x, y=conf.high), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume_Invasive.predict, aes(x=x, y=conf.low), color=\"blue\", linetype=\"dashed\")+\n  geom_line(data=Volume_Invasive.predict, aes(x,predicted), color=\"blue\")+\n  annotate(geom=\"text\", x=10, y=8, label=paste(\"Adj R Sq = \", round(Volume_Invasive.lm.summary$adj.r.squared,2), \"\\n\", pvalue))+\ntheme_minimalism()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](CMRO2_Analysis_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Tables\n\n## CBF\n\n| ROI | Category 1 |\n| --- | --- |\n| CGM | 0.05 [-0.31 to 0.41] / 0.02 |\n| WM | 0.08 [-0.17 to 0.32] / 0.13 |\n| DeepGM | -0.05 [-0.59 to 0.5] / 0.06 |\n| Cerebellum | 0.18 [-0.5 to 0.87] / 0.07 |\n| Brainstem | 0.17 [-0.75 to 1.09] / 0.05 |\n| Hipandamyg | 0.05 [-0.53 to 0.63] / 0.02 |\n\n| ROI | Category 2 |\n| --- | --- |\n| CGM | 0.2 [0.05 to 0.36] / 0.34 |\n| WM | 0.15 [0.05 to 0.26] / 0.44 |\n| DeepGM | 0.28 [0.02 to 0.53] / 0.3 |\n| Cerebellum | 0.43 [0.14 to 0.72] / 0.44 |\n| Brainstem | 0.59 [0.2 to 0.97] / 0.44 |\n| Hipandamyg | 0.33 [0.08 to 0.59] / 0.35 |\n\n| ROI | Category 3 |\n| --- | --- |\n| CGM | 0.13 [-0.14 to 0.4] / 0.08 |\n| WM | 0.07 [-0.12 to 0.26] / 0.14 |\n| DeepGM | 0.16 [-0.26 to 0.57] / 0.1 |\n| Cerebellum | 0.21 [-0.31 to 0.73] / 0.09 |\n| Brainstem | 0.21 [-0.49 to 0.92] / 0.06 |\n| Hipandamyg | 0.13 [-0.31 to 0.57] / 0.04 |\n\n| ROI | Proportion of Days on All Categories |\n| --- | --- |\n| CGM | 10.27 [2.17 to 18.37] / 0.34 |\n| WM | 6.7 [0.86 to 12.55] / 0.36 |\n| DeepGM | 15.82 [3.51 to 28.13] / 0.37 |\n| Cerebellum | 18.81 [2.98 to 34.64] / 0.33 |\n| Brainstem | 25.22 [3.9 to 46.53] / 0.32 |\n| Hipandamyg | 16.73 [3.73 to 29.73] / 0.34 |\n\n| ROI | Room Air |\n| --- | --- |\n| CGM | -0.15 [-0.29 to -0.02] / 0.28 |\n| WM | -0.1 [-0.19 to 0] / 0.3 |\n| DeepGM | -0.23 [-0.44 to -0.03] / 0.32 |\n| Cerebellum | -0.26 [-0.53 to 0.01] / 0.26 |\n| Brainstem | -0.36 [-0.72 to 0] / 0.26 |\n| Hipandamyg | -0.25 [-0.47 to -0.03] / 0.29 |\n\n## CMRO2\n\n| ROI | Category 1 |\n| --- | --- |\n| CGM | 0.04 [-0.68 to 0.77] / 0.04 |\n| WM | 0.13 [-0.39 to 0.64] / 0.14 |\n| DeepGM | -0.19 [-1.27 to 0.89] / 0.09 |\n| Cerebellum | 0.27 [-1.03 to 1.56] / 0.1 |\n| Brainstem | 0.2 [-1.55 to 1.96] / 0.07 |\n| Hipandamyg | 0 [-1.15 to 1.15] / 0.04 |\n\n| ROI | Category 2 |\n| --- | --- |\n| CGM | 0.31 [-0.04 to 0.66] / 0.22 |\n| WM | 0.24 [-0.01 to 0.48] / 0.31 |\n| DeepGM | 0.41 [-0.13 to 0.95] / 0.22 |\n| Cerebellum | 0.7 [0.11 to 1.29] / 0.36 |\n| Brainstem | 0.96 [0.17 to 1.75] / 0.36 |\n| Hipandamyg | 0.52 [-0.03 to 1.07] / 0.24 |\n\n| ROI | Category 3 |\n| --- | --- |\n| CGM | 0.25 [-0.29 to 0.79] / 0.1 |\n| WM | 0.15 [-0.24 to 0.54] / 0.16 |\n| DeepGM | 0.3 [-0.52 to 1.12] / 0.12 |\n| Cerebellum | 0.39 [-0.59 to 1.38] / 0.13 |\n| Brainstem | 0.4 [-0.95 to 1.74] / 0.09 |\n| Hipandamyg | 0.25 [-0.63 to 1.13] / 0.06 |\n\n| ROI | Proportion of Days on All Categories |\n| --- | --- |\n| CGM | 23.31 [8.19 to 38.44] / 0.44 |\n| WM | 15.68 [4.38 to 26.98] / 0.44 |\n| DeepGM | 34.74 [11.97 to 57.5] / 0.46 |\n| Cerebellum | 40.71 [12.88 to 68.54] / 0.45 |\n| Brainstem | 54.63 [16.85 to 92.4] / 0.43 |\n| Hipandamyg | 37.23 [13.28 to 61.17] / 0.44 |\n\n| ROI | Room Air |\n| --- | --- |\n| CGM | -0.36 [-0.62 to -0.11] / 0.41 |\n| WM | -0.24 [-0.43 to -0.05] / 0.41 |\n| DeepGM | -0.54 [-0.92 to -0.16] / 0.43 |\n| Cerebellum | -0.6 [-1.08 to -0.12] / 0.39 |\n| Brainstem | -0.82 [-1.46 to -0.18] / 0.38 |\n| Hipandamyg | -0.58 [-0.98 to -0.17] / 0.41 |\n\n# CSVO2\n\n| ROI | Category 1 | Category 2 | Category 3 | Proportion of Days on All Categories | Room Air |\n| --- | --- | --- | --- | --- | --- |\n| Wholebrain | -0.16 [-0.51 to 0.2] / -0.1 | 0.06 [-0.14 to 0.25] / -0.13 | -0.06 [-0.34 to 0.22] / -0.15 | -0.68 [-10.72 to 9.36] / -0.16 | -0.02 [-0.19 to 0.14] / -0.15 |\n\n# CSaO2\n\n| ROI | Category 1 | Category 2 | Category 3 | Proportion of Days on All Categories | Room Air |\n| --- | --- | --- | --- | --- | --- |\n| Wholebrain | -0.05 [-0.18 to 0.08] / 0.06 | -0.06 [-0.12 to 0] / 0.23 | 0.02 [-0.08 to 0.12] / 0.03 | 0.34 [-3.23 to 3.91] / 0.02 | -0.01 [-0.07 to 0.05] / 0.02 |\n\n# OEF\n\n| ROI | Category 1 | Category 2 | Category 3 | Proportion of Days on All Categories | Room Air |\n| --- | --- | --- | --- | --- | --- |\n| Wholebrain | 0.13 [-0.26 to 0.52] / -0.14 | -0.1 [-0.31 to 0.11] / -0.1 | 0.07 [-0.23 to 0.38] / -0.15 | 0.83 [-10.03 to 11.68] / -0.17 | 0.02 [-0.16 to 0.19] / -0.17 |\n\n# Hct\n\n| ROI | Category 1 | Category 2 | Category 3 | Proportion of Days on All Categories | Room Air |\n| --- | --- | --- | --- | --- | --- |\n| Wholebrain | -0.19 [-0.49 to 0.12] / -0.07 | -0.02 [-0.2 to 0.15] / -0.18 | -0.05 [-0.3 to 0.19] / -0.17 | 2.35 [-6.48 to 11.17] / -0.16 | -0.09 [-0.23 to 0.05] / -0.05 |\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsave.image(\"results.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}